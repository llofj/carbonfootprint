{"ast":null,"code":"import _regeneratorRuntime from \"D:/computer_design/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/computer_design/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\nvar api = axios.create(axiosConfig);\nexport default {\n  data: function data() {\n    return {\n      username: '',\n      password: '',\n      captcha: '',\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      loginAttempts: 0,\n      maxLoginAttempts: 5,\n      lockTime: 60,\n      // 锁定时间（秒）\n      lockTimeRemaining: 0,\n      lockTimeInterval: null\n    };\n  },\n  computed: {\n    isFormValid: function isFormValid() {\n      return this.username.trim() && this.password && this.captcha.trim() === '0000';\n    }\n  },\n  methods: {\n    clearError: function clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword: function togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    startLockTimer: function startLockTimer() {\n      var _this = this;\n      this.lockTimeRemaining = this.lockTime;\n      this.lockTimeInterval = setInterval(function () {\n        _this.lockTimeRemaining--;\n        if (_this.lockTimeRemaining <= 0) {\n          _this.resetLockout();\n        }\n      }, 1000);\n    },\n    resetLockout: function resetLockout() {\n      clearInterval(this.lockTimeInterval);\n      this.lockTimeInterval = null;\n      this.loginAttempts = 0;\n      this.lockTimeRemaining = 0;\n    },\n    increaseLoginAttempt: function increaseLoginAttempt() {\n      this.loginAttempts++;\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        this.startLockTimer();\n        this.errorMessage = \"\\u767B\\u5F55\\u5C1D\\u8BD5\\u6B21\\u6570\\u8FC7\\u591A\\uFF0C\\u8D26\\u53F7\\u5DF2\\u88AB\\u4E34\\u65F6\\u9501\\u5B9A \".concat(this.lockTime, \" \\u79D2\");\n      }\n    },\n    validateForm: function validateForm() {\n      var isValid = true;\n      if (!this.username.trim()) {\n        this.errorMessage = '请输入用户名';\n        isValid = false;\n      } else if (!this.password) {\n        this.errorMessage = '请输入密码';\n        isValid = false;\n      } else if (this.captcha.trim() !== '0000') {\n        this.errorMessage = '验证码错误，请输入0000';\n        isValid = false;\n      }\n      return isValid;\n    },\n    handleSubmit: function handleSubmit() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var loginData, response, redirect, _redirect, status, errorData, _redirect2;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this2.loginAttempts >= _this2.maxLoginAttempts)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              if (_this2.validateForm()) {\n                _context.next = 5;\n                break;\n              }\n              _this2.increaseLoginAttempt();\n              return _context.abrupt(\"return\");\n            case 5:\n              _this2.isLoading = true;\n              _this2.errorMessage = '';\n              _context.prev = 7;\n              loginData = {\n                username: _this2.username.trim(),\n                password: _this2.password,\n                captcha: _this2.captcha.trim()\n              };\n              console.log('正在发送登录请求:', {\n                url: \"\".concat(axiosConfig.baseURL).concat(API_URLS.login),\n                username: loginData.username\n              });\n              _context.next = 12;\n              return api.post(API_URLS.login, loginData);\n            case 12:\n              response = _context.sent;\n              console.log('服务器响应:', response.data);\n              if (!(response.data && response.data.token)) {\n                _context.next = 23;\n                break;\n              }\n              // 登录成功，重置尝试次数\n              _this2.resetLockout();\n\n              // 存储用户信息\n              localStorage.setItem('token', response.data.token);\n              localStorage.setItem('username', _this2.username.trim());\n              if (response.data.user) {\n                localStorage.setItem('userId', response.data.user.id);\n                localStorage.setItem('userEmail', response.data.user.email || '');\n              }\n\n              // 跳转到目标页面\n              redirect = _this2.$route.query.redirect || '/';\n              _context.next = 22;\n              return _this2.$router.push(redirect);\n            case 22:\n              return _context.abrupt(\"return\");\n            case 23:\n              if (!(response.data && response.data.message)) {\n                _context.next = 27;\n                break;\n              }\n              _this2.errorMessage = response.data.message;\n              _this2.increaseLoginAttempt();\n              return _context.abrupt(\"return\");\n            case 27:\n              if (!(_this2.username === 'test' && _this2.password === 'test123')) {\n                _context.next = 36;\n                break;\n              }\n              // 重置尝试次数\n              _this2.resetLockout();\n              localStorage.setItem('token', 'mock-token-12345');\n              localStorage.setItem('username', _this2.username.trim());\n              localStorage.setItem('userId', 'mock-id');\n              _redirect = _this2.$route.query.redirect || '/';\n              _context.next = 35;\n              return _this2.$router.push(_redirect);\n            case 35:\n              return _context.abrupt(\"return\");\n            case 36:\n              _this2.errorMessage = '账号或密码错误';\n              _this2.increaseLoginAttempt();\n              _context.next = 77;\n              break;\n            case 40:\n              _context.prev = 40;\n              _context.t0 = _context[\"catch\"](7);\n              console.error('登录请求失败:', _context.t0);\n              if (!_context.t0.response) {\n                _context.next = 61;\n                break;\n              }\n              status = _context.t0.response.status;\n              errorData = _context.t0.response.data;\n              _context.t1 = status;\n              _context.next = _context.t1 === 401 ? 49 : _context.t1 === 403 ? 51 : _context.t1 === 429 ? 53 : _context.t1 === 500 ? 55 : 57;\n              break;\n            case 49:\n              _this2.errorMessage = '账号或密码错误';\n              return _context.abrupt(\"break\", 58);\n            case 51:\n              _this2.errorMessage = '验证码错误';\n              return _context.abrupt(\"break\", 58);\n            case 53:\n              _this2.errorMessage = '登录尝试次数过多，请稍后再试';\n              return _context.abrupt(\"break\", 58);\n            case 55:\n              _this2.errorMessage = '服务器错误，请稍后重试';\n              return _context.abrupt(\"break\", 58);\n            case 57:\n              _this2.errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || '登录失败，请稍后重试';\n            case 58:\n              _this2.increaseLoginAttempt();\n              _context.next = 77;\n              break;\n            case 61:\n              if (!_context.t0.request) {\n                _context.next = 75;\n                break;\n              }\n              // 服务器没有响应\n              console.log('服务器未响应，尝试备用登录');\n              if (!(_this2.username === 'test' && _this2.password === 'test123')) {\n                _context.next = 71;\n                break;\n              }\n              _this2.resetLockout();\n              localStorage.setItem('token', 'mock-token-12345');\n              localStorage.setItem('username', _this2.username.trim());\n              _redirect2 = _this2.$route.query.redirect || '/';\n              _context.next = 70;\n              return _this2.$router.push(_redirect2);\n            case 70:\n              return _context.abrupt(\"return\");\n            case 71:\n              _this2.errorMessage = '无法连接到服务器，请检查网络连接';\n              _this2.increaseLoginAttempt();\n              _context.next = 77;\n              break;\n            case 75:\n              _this2.errorMessage = '登录请求发送失败';\n              _this2.increaseLoginAttempt();\n            case 77:\n              _context.prev = 77;\n              _this2.isLoading = false;\n              return _context.finish(77);\n            case 80:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[7, 40, 77, 80]]);\n      }))();\n    }\n  },\n  created: function created() {\n    // 如果有token，直接跳转\n    if (localStorage.getItem('token')) {\n      var redirect = this.$route.query.redirect || '/';\n      this.$router.push(redirect);\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    // 清除可能存在的计时器\n    if (this.lockTimeInterval) {\n      clearInterval(this.lockTimeInterval);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URLS","axiosConfig","api","create","data","username","password","captcha","errorMessage","isLoading","showPassword","loginAttempts","maxLoginAttempts","lockTime","lockTimeRemaining","lockTimeInterval","computed","isFormValid","trim","methods","clearError","togglePassword","startLockTimer","_this","setInterval","resetLockout","clearInterval","increaseLoginAttempt","concat","validateForm","isValid","handleSubmit","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","loginData","response","redirect","_redirect","status","errorData","_redirect2","wrap","_callee$","_context","prev","next","abrupt","console","log","url","baseURL","login","post","sent","token","localStorage","setItem","user","id","email","$route","query","$router","push","message","t0","error","t1","request","finish","stop","created","getItem","beforeUnmount"],"sources":["D:\\computer_design\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\n  <div class=\"login-form\">\n    <h2>登录</h2>\n    <form @submit.prevent=\"handleSubmit\">\n      <div class=\"form-group\">\n        <label for=\"username\">账号:</label>\n        <input \n          type=\"text\" \n          id=\"username\" \n          v-model.trim=\"username\" \n          required \n          :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n          @input=\"clearError\"\n          placeholder=\"请输入用户名\"\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">密码:</label>\n        <div class=\"password-input\">\n          <input \n            :type=\"showPassword ? 'text' : 'password'\" \n            id=\"password\" \n            v-model=\"password\" \n            required \n            :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n            @input=\"clearError\"\n            placeholder=\"请输入密码\"\n          />\n          <i \n            class=\"fas\" \n            :class=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"\n            @click=\"togglePassword\"\n          ></i>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"captcha\">验证码:</label>\n        <div class=\"captcha-group\">\n          <div class=\"captcha-input\">\n            <input \n              type=\"text\" \n              id=\"captcha\" \n              v-model.trim=\"captcha\" \n              required \n              :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n              @input=\"clearError\"\n              maxlength=\"4\"\n              placeholder=\"请输入验证码\"\n            />\n          </div>\n          <div class=\"captcha-code\">\n            0000\n          </div>\n        </div>\n        <div class=\"captcha-hint\">(请输入0000)</div>\n      </div>\n      <button type=\"submit\" :disabled=\"isLoading || !isFormValid || loginAttempts >= maxLoginAttempts\">\n        <span v-if=\"isLoading\">\n          <i class=\"fas fa-spinner fa-spin\"></i> 登录中...\n        </span>\n        <span v-else-if=\"loginAttempts >= maxLoginAttempts\">\n          <i class=\"fas fa-lock\"></i> 登录已锁定 ({{ lockTimeRemaining }}秒)\n        </span>\n        <span v-else>登录</span>\n      </button>\n      <div v-if=\"errorMessage\" class=\"error-container\">\n        <i class=\"fas fa-exclamation-circle\"></i>\n        {{ errorMessage }}\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\n\nconst api = axios.create(axiosConfig);\n\nexport default {\n  data() {\n    return {\n      username: '',\n      password: '',\n      captcha: '',\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      loginAttempts: 0,\n      maxLoginAttempts: 5,\n      lockTime: 60, // 锁定时间（秒）\n      lockTimeRemaining: 0,\n      lockTimeInterval: null\n    };\n  },\n  computed: {\n    isFormValid() {\n      return this.username.trim() && \n             this.password && \n             this.captcha.trim() === '0000';\n    }\n  },\n  methods: {\n    clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    startLockTimer() {\n      this.lockTimeRemaining = this.lockTime;\n      this.lockTimeInterval = setInterval(() => {\n        this.lockTimeRemaining--;\n        if (this.lockTimeRemaining <= 0) {\n          this.resetLockout();\n        }\n      }, 1000);\n    },\n    resetLockout() {\n      clearInterval(this.lockTimeInterval);\n      this.lockTimeInterval = null;\n      this.loginAttempts = 0;\n      this.lockTimeRemaining = 0;\n    },\n    increaseLoginAttempt() {\n      this.loginAttempts++;\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        this.startLockTimer();\n        this.errorMessage = `登录尝试次数过多，账号已被临时锁定 ${this.lockTime} 秒`;\n      }\n    },\n    validateForm() {\n      let isValid = true;\n      \n      if (!this.username.trim()) {\n        this.errorMessage = '请输入用户名';\n        isValid = false;\n      } else if (!this.password) {\n        this.errorMessage = '请输入密码';\n        isValid = false;\n      } else if (this.captcha.trim() !== '0000') {\n        this.errorMessage = '验证码错误，请输入0000';\n        isValid = false;\n      }\n      \n      return isValid;\n    },\n    async handleSubmit() {\n      // 如果达到最大尝试次数，不处理提交\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        return;\n      }\n      \n      // 表单验证\n      if (!this.validateForm()) {\n        this.increaseLoginAttempt();\n        return;\n      }\n      \n      this.isLoading = true;\n      this.errorMessage = '';\n      \n      try {\n        const loginData = {\n          username: this.username.trim(),\n          password: this.password,\n          captcha: this.captcha.trim()\n        };\n        \n        console.log('正在发送登录请求:', {\n          url: `${axiosConfig.baseURL}${API_URLS.login}`,\n          username: loginData.username\n        });\n        \n        const response = await api.post(API_URLS.login, loginData);\n        \n        console.log('服务器响应:', response.data);\n        \n        if (response.data && response.data.token) {\n          // 登录成功，重置尝试次数\n          this.resetLockout();\n          \n          // 存储用户信息\n          localStorage.setItem('token', response.data.token);\n          localStorage.setItem('username', this.username.trim());\n          \n          if (response.data.user) {\n            localStorage.setItem('userId', response.data.user.id);\n            localStorage.setItem('userEmail', response.data.user.email || '');\n          }\n          \n          // 跳转到目标页面\n          const redirect = this.$route.query.redirect || '/';\n          await this.$router.push(redirect);\n          return;\n        }\n        \n        // 如果没有token但服务器返回了消息\n        if (response.data && response.data.message) {\n          this.errorMessage = response.data.message;\n          this.increaseLoginAttempt();\n          return;\n        }\n        \n        // 尝试备用登录\n        if (this.username === 'test' && this.password === 'test123') {\n          // 重置尝试次数\n          this.resetLockout();\n          \n          localStorage.setItem('token', 'mock-token-12345');\n          localStorage.setItem('username', this.username.trim());\n          localStorage.setItem('userId', 'mock-id');\n          \n          const redirect = this.$route.query.redirect || '/';\n          await this.$router.push(redirect);\n          return;\n        }\n        \n        this.errorMessage = '账号或密码错误';\n        this.increaseLoginAttempt();\n        \n      } catch (error) {\n        console.error('登录请求失败:', error);\n        \n        if (error.response) {\n          const status = error.response.status;\n          const errorData = error.response.data;\n          \n          switch (status) {\n            case 401:\n              this.errorMessage = '账号或密码错误';\n              break;\n            case 403:\n              this.errorMessage = '验证码错误';\n              break;\n            case 429:\n              this.errorMessage = '登录尝试次数过多，请稍后再试';\n              break;\n            case 500:\n              this.errorMessage = '服务器错误，请稍后重试';\n              break;\n            default:\n              this.errorMessage = errorData?.message || '登录失败，请稍后重试';\n          }\n          \n          this.increaseLoginAttempt();\n        } else if (error.request) {\n          // 服务器没有响应\n          console.log('服务器未响应，尝试备用登录');\n          if (this.username === 'test' && this.password === 'test123') {\n            this.resetLockout();\n            \n            localStorage.setItem('token', 'mock-token-12345');\n            localStorage.setItem('username', this.username.trim());\n            \n            const redirect = this.$route.query.redirect || '/';\n            await this.$router.push(redirect);\n            return;\n          }\n          this.errorMessage = '无法连接到服务器，请检查网络连接';\n          this.increaseLoginAttempt();\n        } else {\n          this.errorMessage = '登录请求发送失败';\n          this.increaseLoginAttempt();\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  },\n  created() {\n    // 如果有token，直接跳转\n    if (localStorage.getItem('token')) {\n      const redirect = this.$route.query.redirect || '/';\n      this.$router.push(redirect);\n    }\n  },\n  beforeUnmount() {\n    // 清除可能存在的计时器\n    if (this.lockTimeInterval) {\n      clearInterval(this.lockTimeInterval);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.login-form {\n  width: 100%;\n  max-width: 400px;\n  margin: 2rem auto;\n  padding: 2rem;\n  border-radius: 10px;\n  background-color: white;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.login-form h2 {\n  text-align: center;\n  color: #1e3d59;\n  margin-bottom: 2rem;\n  font-size: 1.8rem;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #333;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-size: 1rem;\n  transition: border-color 0.3s;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #3498db;\n  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n}\n\n.password-input {\n  position: relative;\n}\n\n.password-input i {\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  color: #777;\n}\n\n.captcha-group {\n  display: flex;\n  gap: 10px;\n}\n\n.captcha-input {\n  flex: 1;\n}\n\n.captcha-code {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 100px;\n  background-color: #f5f5f5;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-weight: bold;\n  letter-spacing: 3px;\n  color: #333;\n  user-select: none;\n}\n\n.captcha-hint {\n  margin-top: 4px;\n  font-size: 12px;\n  color: #888;\n}\n\nbutton {\n  width: 100%;\n  padding: 0.75rem;\n  border: none;\n  border-radius: 5px;\n  background-color: #3498db;\n  color: white;\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: #2980b9;\n}\n\nbutton:disabled {\n  background-color: #95a5a6;\n  cursor: not-allowed;\n}\n\n.error-container {\n  margin-top: 1rem;\n  padding: 0.75rem;\n  background-color: #ffebee;\n  border-radius: 5px;\n  color: #e53935;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.error-container i {\n  font-size: 1.1rem;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}