{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelDynamic as _vModelDynamic, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, withModifiers as _withModifiers } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"login-form\"\n};\nvar _hoisted_2 = {\n  \"class\": \"form-group\"\n};\nvar _hoisted_3 = [\"disabled\"];\nvar _hoisted_4 = {\n  \"class\": \"form-group\"\n};\nvar _hoisted_5 = {\n  \"class\": \"password-input\"\n};\nvar _hoisted_6 = [\"type\", \"disabled\"];\nvar _hoisted_7 = {\n  \"class\": \"form-group\"\n};\nvar _hoisted_8 = {\n  \"class\": \"captcha-group\"\n};\nvar _hoisted_9 = {\n  \"class\": \"captcha-input\"\n};\nvar _hoisted_10 = [\"disabled\"];\nvar _hoisted_11 = [\"disabled\"];\nvar _hoisted_12 = {\n  key: 0\n};\nvar _hoisted_13 = {\n  key: 1\n};\nvar _hoisted_14 = {\n  key: 2\n};\nvar _hoisted_15 = {\n  key: 0,\n  \"class\": \"error-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[16] || (_cache[16] = _createElementVNode(\"h2\", null, \"登录\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[7] || (_cache[7] = _withModifiers(function () {\n      return $options.handleSubmit && $options.handleSubmit.apply($options, arguments);\n    }, [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    \"for\": \"username\"\n  }, \"账号:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"username\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.username = $event;\n    }),\n    required: \"\",\n    disabled: $data.isLoading || $data.loginAttempts >= $data.maxLoginAttempts,\n    onInput: _cache[1] || (_cache[1] = function () {\n      return $options.clearError && $options.clearError.apply($options, arguments);\n    }),\n    placeholder: \"请输入用户名\"\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_3), [[_vModelText, $data.username, void 0, {\n    trim: true\n  }]])]), _createElementVNode(\"div\", _hoisted_4, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    \"for\": \"password\"\n  }, \"密码:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"input\", {\n    type: $data.showPassword ? 'text' : 'password',\n    id: \"password\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n      return $data.password = $event;\n    }),\n    required: \"\",\n    disabled: $data.isLoading || $data.loginAttempts >= $data.maxLoginAttempts,\n    onInput: _cache[3] || (_cache[3] = function () {\n      return $options.clearError && $options.clearError.apply($options, arguments);\n    }),\n    placeholder: \"请输入密码\"\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), [[_vModelDynamic, $data.password]]), _createElementVNode(\"i\", {\n    \"class\": _normalizeClass([\"fas\", $data.showPassword ? 'fa-eye-slash' : 'fa-eye']),\n    onClick: _cache[4] || (_cache[4] = function () {\n      return $options.togglePassword && $options.togglePassword.apply($options, arguments);\n    })\n  }, null, 2 /* CLASS */)])]), _createElementVNode(\"div\", _hoisted_7, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    \"for\": \"captcha\"\n  }, \"验证码:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"captcha\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = function ($event) {\n      return $data.captcha = $event;\n    }),\n    required: \"\",\n    disabled: $data.isLoading || $data.loginAttempts >= $data.maxLoginAttempts,\n    onInput: _cache[6] || (_cache[6] = function () {\n      return $options.clearError && $options.clearError.apply($options, arguments);\n    }),\n    maxlength: \"4\",\n    placeholder: \"请输入验证码\"\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_10), [[_vModelText, $data.captcha, void 0, {\n    trim: true\n  }]])]), _cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    \"class\": \"captcha-code\"\n  }, \" 0000 \", -1 /* HOISTED */))]), _cache[12] || (_cache[12] = _createElementVNode(\"div\", {\n    \"class\": \"captcha-hint\"\n  }, \"(请输入0000)\", -1 /* HOISTED */))]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    disabled: $data.isLoading || !$options.isFormValid || $data.loginAttempts >= $data.maxLoginAttempts\n  }, [$data.isLoading ? (_openBlock(), _createElementBlock(\"span\", _hoisted_12, _cache[13] || (_cache[13] = [_createElementVNode(\"i\", {\n    \"class\": \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" 登录中... \")]))) : $data.loginAttempts >= $data.maxLoginAttempts ? (_openBlock(), _createElementBlock(\"span\", _hoisted_13, [_cache[14] || (_cache[14] = _createElementVNode(\"i\", {\n    \"class\": \"fas fa-lock\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" 登录已锁定 (\" + _toDisplayString($data.lockTimeRemaining) + \"秒) \", 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"span\", _hoisted_14, \"登录\"))], 8 /* PROPS */, _hoisted_11), $data.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_cache[15] || (_cache[15] = _createElementVNode(\"i\", {\n    \"class\": \"fas fa-exclamation-circle\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.errorMessage), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","onSubmit","_cache","_withModifiers","$options","handleSubmit","apply","arguments","_hoisted_2","type","id","$event","$data","username","required","disabled","isLoading","loginAttempts","maxLoginAttempts","onInput","clearError","placeholder","_hoisted_3","trim","_hoisted_4","_hoisted_5","showPassword","password","_hoisted_6","_normalizeClass","onClick","togglePassword","_hoisted_7","_hoisted_8","_hoisted_9","captcha","maxlength","_hoisted_10","isFormValid","_hoisted_12","_createTextVNode","_hoisted_13","_toDisplayString","lockTimeRemaining","_hoisted_14","_hoisted_11","errorMessage","_hoisted_15","_createCommentVNode"],"sources":["D:\\computer_design\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\n  <div class=\"login-form\">\n    <h2>登录</h2>\n    <form @submit.prevent=\"handleSubmit\">\n      <div class=\"form-group\">\n        <label for=\"username\">账号:</label>\n        <input \n          type=\"text\" \n          id=\"username\" \n          v-model.trim=\"username\" \n          required \n          :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n          @input=\"clearError\"\n          placeholder=\"请输入用户名\"\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">密码:</label>\n        <div class=\"password-input\">\n          <input \n            :type=\"showPassword ? 'text' : 'password'\" \n            id=\"password\" \n            v-model=\"password\" \n            required \n            :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n            @input=\"clearError\"\n            placeholder=\"请输入密码\"\n          />\n          <i \n            class=\"fas\" \n            :class=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"\n            @click=\"togglePassword\"\n          ></i>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"captcha\">验证码:</label>\n        <div class=\"captcha-group\">\n          <div class=\"captcha-input\">\n            <input \n              type=\"text\" \n              id=\"captcha\" \n              v-model.trim=\"captcha\" \n              required \n              :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n              @input=\"clearError\"\n              maxlength=\"4\"\n              placeholder=\"请输入验证码\"\n            />\n          </div>\n          <div class=\"captcha-code\">\n            0000\n          </div>\n        </div>\n        <div class=\"captcha-hint\">(请输入0000)</div>\n      </div>\n      <button type=\"submit\" :disabled=\"isLoading || !isFormValid || loginAttempts >= maxLoginAttempts\">\n        <span v-if=\"isLoading\">\n          <i class=\"fas fa-spinner fa-spin\"></i> 登录中...\n        </span>\n        <span v-else-if=\"loginAttempts >= maxLoginAttempts\">\n          <i class=\"fas fa-lock\"></i> 登录已锁定 ({{ lockTimeRemaining }}秒)\n        </span>\n        <span v-else>登录</span>\n      </button>\n      <div v-if=\"errorMessage\" class=\"error-container\">\n        <i class=\"fas fa-exclamation-circle\"></i>\n        {{ errorMessage }}\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\n\nconst api = axios.create(axiosConfig);\n\nexport default {\n  data() {\n    return {\n      username: '',\n      password: '',\n      captcha: '',\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      loginAttempts: 0,\n      maxLoginAttempts: 5,\n      lockTime: 60, // 锁定时间（秒）\n      lockTimeRemaining: 0,\n      lockTimeInterval: null\n    };\n  },\n  computed: {\n    isFormValid() {\n      return this.username.trim() && \n             this.password && \n             this.captcha.trim() === '0000';\n    }\n  },\n  methods: {\n    clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    startLockTimer() {\n      this.lockTimeRemaining = this.lockTime;\n      this.lockTimeInterval = setInterval(() => {\n        this.lockTimeRemaining--;\n        if (this.lockTimeRemaining <= 0) {\n          this.resetLockout();\n        }\n      }, 1000);\n    },\n    resetLockout() {\n      clearInterval(this.lockTimeInterval);\n      this.lockTimeInterval = null;\n      this.loginAttempts = 0;\n      this.lockTimeRemaining = 0;\n    },\n    increaseLoginAttempt() {\n      this.loginAttempts++;\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        this.startLockTimer();\n        this.errorMessage = `登录尝试次数过多，账号已被临时锁定 ${this.lockTime} 秒`;\n      }\n    },\n    validateForm() {\n      let isValid = true;\n      \n      if (!this.username.trim()) {\n        this.errorMessage = '请输入用户名';\n        isValid = false;\n      } else if (!this.password) {\n        this.errorMessage = '请输入密码';\n        isValid = false;\n      } else if (this.captcha.trim() !== '0000') {\n        this.errorMessage = '验证码错误，请输入0000';\n        isValid = false;\n      }\n      \n      return isValid;\n    },\n    async handleSubmit() {\n      // 如果达到最大尝试次数，不处理提交\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        return;\n      }\n      \n      // 表单验证\n      if (!this.validateForm()) {\n        this.increaseLoginAttempt();\n        return;\n      }\n      \n      this.isLoading = true;\n      this.errorMessage = '';\n      \n      try {\n        const loginData = {\n          username: this.username.trim(),\n          password: this.password,\n          captcha: this.captcha.trim()\n        };\n        \n        console.log('正在发送登录请求:', {\n          url: `${axiosConfig.baseURL}${API_URLS.login}`,\n          username: loginData.username\n        });\n        \n        const response = await api.post(API_URLS.login, loginData);\n        \n        console.log('服务器响应:', response.data);\n        \n        if (response.data && response.data.token) {\n          // 登录成功，重置尝试次数\n          this.resetLockout();\n          \n          // 存储用户信息\n          localStorage.setItem('token', response.data.token);\n          localStorage.setItem('username', this.username.trim());\n          \n          if (response.data.user) {\n            localStorage.setItem('userId', response.data.user.id);\n            localStorage.setItem('userEmail', response.data.user.email || '');\n          }\n          \n          // 跳转到目标页面\n          const redirect = this.$route.query.redirect || '/';\n          await this.$router.push(redirect);\n          return;\n        }\n        \n        // 如果没有token但服务器返回了消息\n        if (response.data && response.data.message) {\n          this.errorMessage = response.data.message;\n          this.increaseLoginAttempt();\n          return;\n        }\n        \n        // 尝试备用登录\n        if (this.username === 'test' && this.password === 'test123') {\n          // 重置尝试次数\n          this.resetLockout();\n          \n          localStorage.setItem('token', 'mock-token-12345');\n          localStorage.setItem('username', this.username.trim());\n          localStorage.setItem('userId', 'mock-id');\n          \n          const redirect = this.$route.query.redirect || '/';\n          await this.$router.push(redirect);\n          return;\n        }\n        \n        this.errorMessage = '账号或密码错误';\n        this.increaseLoginAttempt();\n        \n      } catch (error) {\n        console.error('登录请求失败:', error);\n        \n        if (error.response) {\n          const status = error.response.status;\n          const errorData = error.response.data;\n          \n          switch (status) {\n            case 401:\n              this.errorMessage = '账号或密码错误';\n              break;\n            case 403:\n              this.errorMessage = '验证码错误';\n              break;\n            case 429:\n              this.errorMessage = '登录尝试次数过多，请稍后再试';\n              break;\n            case 500:\n              this.errorMessage = '服务器错误，请稍后重试';\n              break;\n            default:\n              this.errorMessage = errorData?.message || '登录失败，请稍后重试';\n          }\n          \n          this.increaseLoginAttempt();\n        } else if (error.request) {\n          // 服务器没有响应\n          console.log('服务器未响应，尝试备用登录');\n          if (this.username === 'test' && this.password === 'test123') {\n            this.resetLockout();\n            \n            localStorage.setItem('token', 'mock-token-12345');\n            localStorage.setItem('username', this.username.trim());\n            \n            const redirect = this.$route.query.redirect || '/';\n            await this.$router.push(redirect);\n            return;\n          }\n          this.errorMessage = '无法连接到服务器，请检查网络连接';\n          this.increaseLoginAttempt();\n        } else {\n          this.errorMessage = '登录请求发送失败';\n          this.increaseLoginAttempt();\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  },\n  created() {\n    // 如果有token，直接跳转\n    if (localStorage.getItem('token')) {\n      const redirect = this.$route.query.redirect || '/';\n      this.$router.push(redirect);\n    }\n  },\n  beforeUnmount() {\n    // 清除可能存在的计时器\n    if (this.lockTimeInterval) {\n      clearInterval(this.lockTimeInterval);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.login-form {\n  width: 100%;\n  max-width: 400px;\n  margin: 2rem auto;\n  padding: 2rem;\n  border-radius: 10px;\n  background-color: white;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.login-form h2 {\n  text-align: center;\n  color: #1e3d59;\n  margin-bottom: 2rem;\n  font-size: 1.8rem;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #333;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-size: 1rem;\n  transition: border-color 0.3s;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #3498db;\n  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n}\n\n.password-input {\n  position: relative;\n}\n\n.password-input i {\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  color: #777;\n}\n\n.captcha-group {\n  display: flex;\n  gap: 10px;\n}\n\n.captcha-input {\n  flex: 1;\n}\n\n.captcha-code {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 100px;\n  background-color: #f5f5f5;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-weight: bold;\n  letter-spacing: 3px;\n  color: #333;\n  user-select: none;\n}\n\n.captcha-hint {\n  margin-top: 4px;\n  font-size: 12px;\n  color: #888;\n}\n\nbutton {\n  width: 100%;\n  padding: 0.75rem;\n  border: none;\n  border-radius: 5px;\n  background-color: #3498db;\n  color: white;\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: #2980b9;\n}\n\nbutton:disabled {\n  background-color: #95a5a6;\n  cursor: not-allowed;\n}\n\n.error-container {\n  margin-top: 1rem;\n  padding: 0.75rem;\n  background-color: #ffebee;\n  border-radius: 5px;\n  color: #e53935;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.error-container i {\n  font-size: 1.1rem;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}