{"ast":null,"code":"import _typeof from \"D:/EcoPaw/carbonfootprint_\\u672C\\u5730\\u7248/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _regeneratorRuntime from \"D:/EcoPaw/carbonfootprint_\\u672C\\u5730\\u7248/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/EcoPaw/carbonfootprint_\\u672C\\u5730\\u7248/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport { API_URLS, axiosConfig, requestInterceptor, responseInterceptor } from '../config/api';\n\n// 创建API实例\nvar api = axios.create(axiosConfig);\n\n// 添加请求拦截器\napi.interceptors.request.use(requestInterceptor, function (error) {\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\napi.interceptors.response.use(responseInterceptor.success, responseInterceptor.error);\n\n// 获取API基础URL\nvar getBaseUrl = function getBaseUrl() {\n  var host = window.location.hostname;\n  var port = '5000';\n  var protocol = window.location.protocol;\n  if (host === 'localhost' || host === '127.0.0.1') {\n    return \"http://localhost:\".concat(port, \"/api\");\n  } else {\n    return \"\".concat(protocol, \"//\").concat(host, \":\").concat(port, \"/api\");\n  }\n};\nexport default {\n  data: function data() {\n    return {\n      leaderboard: [],\n      userRank: null,\n      username: '',\n      limit: 10,\n      currentPage: 1,\n      pageSize: 10,\n      loading: false,\n      errorMessage: '',\n      apiBaseUrl: getBaseUrl(),\n      totalUserCount: 200,\n      // 估计的用户总数，可以从后端获取\n      isNewUser: false,\n      registrationDate: null,\n      currentUserRank: null,\n      currentUserCarbonReduction: null,\n      currentPageData: []\n    };\n  },\n  computed: {\n    totalPages: function totalPages() {\n      return Math.ceil(this.leaderboard.length / this.pageSize);\n    },\n    displayedLeaderboard: function displayedLeaderboard() {\n      var start = (this.currentPage - 1) * this.pageSize;\n      var end = start + this.pageSize;\n      return this.leaderboard.slice(start, end);\n    }\n  },\n  created: function created() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var token, userResponse, thirtyDaysAgo, urlParams, rankParam, reductionParam;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('API基础URL:', _this.apiBaseUrl);\n            token = localStorage.getItem('token');\n            if (token) {\n              _context.next = 6;\n              break;\n            }\n            _this.$router.push('/login');\n            return _context.abrupt(\"return\");\n          case 6:\n            _context.next = 8;\n            return axios.get(\"\".concat(_this.apiBaseUrl, \"/auth/user\"), {\n              headers: {\n                Authorization: \"Bearer \".concat(token)\n              }\n            });\n          case 8:\n            userResponse = _context.sent;\n            if (userResponse.data && userResponse.data.username) {\n              _this.username = userResponse.data.username;\n              console.log('成功获取用户信息:', _this.username);\n            } else {\n              console.error('未能获取到用户名:', userResponse.data);\n              _this.username = localStorage.getItem('username') || '';\n            }\n            if (userResponse.data.created_at) {\n              _this.registrationDate = new Date(userResponse.data.created_at);\n              thirtyDaysAgo = new Date();\n              thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n              _this.isNewUser = _this.registrationDate > thirtyDaysAgo;\n            }\n\n            // 尝试从URL参数获取排名信息\n            urlParams = new URLSearchParams(window.location.search);\n            rankParam = urlParams.get('rank');\n            reductionParam = urlParams.get('reduction');\n            if (rankParam) {\n              _this.currentUserRank = rankParam;\n            }\n            if (reductionParam) {\n              _this.currentUserCarbonReduction = reductionParam;\n            }\n            _context.prev = 16;\n            _context.next = 19;\n            return _this.loadLeaderboard();\n          case 19:\n            _context.next = 26;\n            break;\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](16);\n            console.error('排行榜加载失败，尝试自动更新排行榜:', _context.t0);\n            // 如果排行榜加载失败，尝试更新排行榜\n            _context.next = 26;\n            return _this.updateLeaderboard(true);\n          case 26:\n            // 如果排行榜加载成功但还没有用户名，尝试从排行榜数据中获取\n            if (!_this.username && _this.userRank) {\n              _this.username = _this.userRank.username;\n            }\n            _context.next = 43;\n            break;\n          case 29:\n            _context.prev = 29;\n            _context.t1 = _context[\"catch\"](0);\n            console.error('Error loading user data:', _context.t1);\n            // 如果API调用失败，尝试从localStorage获取用户名\n            _this.username = localStorage.getItem('username') || '';\n            _this.handleError(_context.t1, '加载用户数据失败');\n\n            // 如果是首次加载失败，可能需要初始化用户排名，尝试调用updateLeaderboard\n            _context.prev = 34;\n            console.log('尝试通过更新排行榜初始化用户数据...');\n            _context.next = 38;\n            return _this.updateLeaderboard(true);\n          case 38:\n            _context.next = 43;\n            break;\n          case 40:\n            _context.prev = 40;\n            _context.t2 = _context[\"catch\"](34);\n            console.error('初始化排行榜失败:', _context.t2);\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 29], [16, 21], [34, 40]]);\n    }))();\n  },\n  methods: {\n    // 获取用户名的首字母作为头像\n    getInitials: function getInitials(name) {\n      if (!name) return '?';\n\n      // 对于双字节字符（如中文），只取第一个字符\n      if (name.charCodeAt(0) > 127) {\n        return name.charAt(0);\n      }\n\n      // 对于英文等单字节字符，取首字母\n      return name.charAt(0).toUpperCase();\n    },\n    // 获取排名描述\n    getRankDescription: function getRankDescription(rank) {\n      if (rank <= 10) return '优秀减排者';\n      if (rank <= 50) return '活跃减排者';\n      if (rank <= 100) return '进步减排者';\n      return '环保新手';\n    },\n    // 获取百分比\n    getPercentile: function getPercentile(rank) {\n      // 计算击败了多少百分比的用户\n      // 例如：如果总用户数是200，当前排名是20，则击败了(200-20)/200 * 100 = 90%的用户\n      var percentile = Math.floor((this.totalUserCount - rank) / this.totalUserCount * 100);\n      return Math.max(0, Math.min(99, percentile));\n    },\n    // 获取排名图标类\n    getRankIconClass: function getRankIconClass(rank) {\n      if (rank <= 3) return 'text-gold';\n      if (rank <= 10) return 'text-silver';\n      if (rank <= 50) return 'text-bronze';\n      return 'text-normal';\n    },\n    // 获取排名颜色类\n    getRankColorClass: function getRankColorClass(rank) {\n      if (rank <= 3) return 'rank-top';\n      if (rank <= 10) return 'rank-excellent';\n      if (rank <= 50) return 'rank-good';\n      return 'rank-normal';\n    },\n    // 处理错误的通用方法\n    handleError: function handleError(error, defaultMessage) {\n      var errorMsg = defaultMessage;\n      if (error.response && error.response.data && error.response.data.message) {\n        errorMsg = error.response.data.message;\n      } else if (error.message) {\n        errorMsg = \"\".concat(defaultMessage, \": \").concat(error.message);\n      }\n      this.errorMessage = errorMsg;\n      console.error(errorMsg, error);\n    },\n    loadLeaderboard: function loadLeaderboard() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this2.error = null;\n              _this2.loading = true;\n              _context2.prev = 2;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context2.next = 6;\n                break;\n              }\n              throw new Error('用户未登录，请先登录');\n            case 6:\n              console.log('正在加载排行榜数据...');\n              _context2.next = 9;\n              return axios.get(\"\".concat(_this2.apiBaseUrl, \"/leaderboard\"), {\n                headers: {\n                  Authorization: \"Bearer \".concat(token),\n                  'Content-Type': 'application/json'\n                },\n                params: {\n                  limit: _this2.limit // 添加limit参数传递给API\n                }\n              });\n            case 9:\n              response = _context2.sent;\n              if (response.data) {\n                _context2.next = 12;\n                break;\n              }\n              throw new Error('排行榜数据为空');\n            case 12:\n              if (!(_typeof(response.data) !== 'object')) {\n                _context2.next = 14;\n                break;\n              }\n              throw new Error('排行榜数据格式不正确');\n            case 14:\n              if (!Array.isArray(response.data.leaderboard)) {\n                _context2.next = 22;\n                break;\n              }\n              console.log(\"\\u83B7\\u53D6\\u5230\".concat(response.data.leaderboard.length, \"\\u6761\\u6392\\u884C\\u699C\\u8BB0\\u5F55\"));\n              _this2.leaderboard = response.data.leaderboard;\n              _this2.totalUserCount = response.data.totalCount || _this2.leaderboard.length;\n\n              // 保持每页显示固定数量（10条）\n              _this2.pageSize = 10;\n\n              // 计算分页\n              _this2.calculatePagination();\n              _context2.next = 26;\n              break;\n            case 22:\n              console.error('排行榜数据格式不正确，尝试获取用户排名');\n              _context2.next = 25;\n              return _this2.getUserRankOnly();\n            case 25:\n              throw new Error('排行榜数据格式不正确');\n            case 26:\n              if (!response.data.userRank) {\n                _context2.next = 33;\n                break;\n              }\n              _this2.userRank = response.data.userRank;\n              _this2.currentUserRank = response.data.userRank.rank;\n              _this2.currentUserCarbonReduction = response.data.userRank.totalReduction || 0;\n              console.log('当前用户排名:', _this2.currentUserRank);\n              _context2.next = 36;\n              break;\n            case 33:\n              console.warn('排行榜响应中没有用户排名数据，尝试单独获取');\n              _context2.next = 36;\n              return _this2.getUserRankOnly();\n            case 36:\n              _this2.error = null;\n              _context2.next = 47;\n              break;\n            case 39:\n              _context2.prev = 39;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error('加载排行榜失败:', _context2.t0);\n              _this2.error = _context2.t0.message || '加载排行榜失败';\n\n              // 如果排行榜加载失败，尝试单独获取用户排名\n              if (_this2.currentUserRank) {\n                _context2.next = 47;\n                break;\n              }\n              console.log('尝试单独获取用户排名...');\n              _context2.next = 47;\n              return _this2.getUserRankOnly();\n            case 47:\n              _context2.prev = 47;\n              _this2.loading = false;\n              return _context2.finish(47);\n            case 50:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[2, 39, 47, 50]]);\n      }))();\n    },\n    // 仅获取用户排名，不修改减碳总量\n    getUserRankOnly: function getUserRankOnly() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context3.next = 5;\n                break;\n              }\n              console.error('用户未登录，无法获取排名');\n              return _context3.abrupt(\"return\");\n            case 5:\n              console.log('单独获取用户排名数据...');\n              _context3.next = 8;\n              return axios.get(\"\".concat(_this3.apiBaseUrl, \"/user/rank\"), {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 8:\n              response = _context3.sent;\n              if (!(response.data && response.data.rank)) {\n                _context3.next = 17;\n                break;\n              }\n              console.log('获取到用户排名:', response.data);\n              _this3.currentUserRank = response.data.rank;\n              if (response.data.totalReduction) {\n                _this3.currentUserCarbonReduction = response.data.totalReduction;\n              }\n\n              // 更新本地用户排名数据\n              _this3.userRank = response.data;\n              return _context3.abrupt(\"return\", response.data);\n            case 17:\n              console.error('用户排名数据格式不正确:', response.data);\n              return _context3.abrupt(\"return\", null);\n            case 19:\n              _context3.next = 25;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('获取用户排名失败:', _context3.t0);\n              return _context3.abrupt(\"return\", null);\n            case 25:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 21]]);\n      }))();\n    },\n    calculatePagination: function calculatePagination() {\n      // 计算总页数\n      if (this.leaderboard && this.leaderboard.length > 0) {\n        var totalItems = this.leaderboard.length;\n        this.totalPages = Math.ceil(totalItems / this.pageSize);\n\n        // 确保当前页在有效范围内\n        if (this.currentPage < 1) {\n          this.currentPage = 1;\n        } else if (this.currentPage > this.totalPages) {\n          this.currentPage = this.totalPages;\n        }\n\n        // 计算当前页的数据\n        var startIndex = (this.currentPage - 1) * this.pageSize;\n        var endIndex = Math.min(startIndex + this.pageSize, this.leaderboard.length);\n        this.currentPageData = this.leaderboard.slice(startIndex, endIndex);\n        console.log(\"\\u5206\\u9875: \\u7B2C\".concat(this.currentPage, \"\\u9875\\uFF0C\\u5171\").concat(this.totalPages, \"\\u9875\\uFF0C\\u663E\\u793A\").concat(this.currentPageData.length, \"\\u6761\\u8BB0\\u5F55\\uFF0C\\u6BCF\\u9875\").concat(this.pageSize, \"\\u6761\"));\n      } else {\n        this.currentPageData = [];\n        this.totalPages = 0;\n        this.currentPage = 1;\n      }\n    },\n    changePage: function changePage(pageNumber) {\n      if (pageNumber >= 1 && pageNumber <= this.totalPages) {\n        this.currentPage = pageNumber;\n        console.log(\"\\u5207\\u6362\\u5230\\u7B2C\".concat(this.currentPage, \"\\u9875\\uFF0C\\u663E\\u793A\").concat(this.pageSize, \"\\u6761\\u8BB0\\u5F55\"));\n      }\n    },\n    updateLeaderboard: function updateLeaderboard() {\n      var _arguments = arguments,\n        _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var isAutoRetry, token, updateResponse, userPage;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              isAutoRetry = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : false;\n              _context4.prev = 1;\n              _this4.loading = true;\n              _this4.errorMessage = '';\n              token = localStorage.getItem('token');\n              if (token) {\n                _context4.next = 8;\n                break;\n              }\n              _this4.$router.push('/login');\n              return _context4.abrupt(\"return\");\n            case 8:\n              console.log('开始更新排行榜，将刷新用户排名信息...');\n\n              // 直接使用axios更新排名（不会修改减碳总量）\n              _context4.next = 11;\n              return axios.post(\"\".concat(_this4.apiBaseUrl, \"/leaderboard/update\"), {}, {\n                headers: {\n                  Authorization: \"Bearer \".concat(token),\n                  'Content-Type': 'application/json'\n                }\n              });\n            case 11:\n              updateResponse = _context4.sent;\n              console.log('排名更新响应:', updateResponse.data);\n              if (!(updateResponse.data && updateResponse.data.rank)) {\n                _context4.next = 22;\n                break;\n              }\n              console.log(\"\\u7528\\u6237\\u6392\\u540D\\u5DF2\\u66F4\\u65B0\\u4E3A\\u7B2C \".concat(updateResponse.data.rank, \" \\u540D\"));\n              if (_this4.userRank) {\n                // 只更新排名，保持减碳量不变\n                _this4.userRank.rank = updateResponse.data.rank;\n              }\n\n              // 更新当前用户的排名\n              _this4.currentUserRank = updateResponse.data.rank;\n\n              // 重新加载排行榜数据以获取完整的排行榜，不仅仅是当前用户\n              _context4.next = 19;\n              return _this4.loadLeaderboard();\n            case 19:\n              // 计算并跳转至包含当前用户排名的页面\n              if (_this4.currentUserRank) {\n                userPage = Math.ceil(_this4.currentUserRank / _this4.pageSize);\n                if (userPage > 0 && userPage <= _this4.totalPages) {\n                  _this4.currentPage = userPage;\n                  console.log(\"\\u8DF3\\u8F6C\\u5230\\u5305\\u542B\\u7528\\u6237\\u6392\\u540D\\u7684\\u9875\\u9762: \\u7B2C\".concat(_this4.currentPage, \"\\u9875\"));\n                }\n              }\n              _context4.next = 25;\n              break;\n            case 22:\n              console.error('更新排名响应数据格式不正确:', updateResponse.data);\n              // 如果更新失败，并且不是自动重试，则重新加载最新数据\n              _context4.next = 25;\n              return _this4.loadLeaderboard();\n            case 25:\n              _this4.errorMessage = '';\n              if (!isAutoRetry) {\n                _this4.showSuccessNotification('排行榜更新成功');\n              }\n              _context4.next = 33;\n              break;\n            case 29:\n              _context4.prev = 29;\n              _context4.t0 = _context4[\"catch\"](1);\n              _this4.handleError(_context4.t0, '更新排行榜失败');\n              // 如果是自动重试过程中的错误，显示友好提示\n              if (isAutoRetry) {\n                _this4.errorMessage = '获取排行榜数据失败，请稍后手动点击刷新按钮重试';\n              }\n            case 33:\n              _context4.prev = 33;\n              _this4.loading = false;\n              return _context4.finish(33);\n            case 36:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 29, 33, 36]]);\n      }))();\n    },\n    // 显示成功通知\n    showSuccessNotification: function showSuccessNotification(message) {\n      // 如果组件有相关的通知系统，可以在这里实现\n      console.log('成功:', message);\n    },\n    isCurrentUser: function isCurrentUser(userId) {\n      return this.userRank && this.userRank.user_id === userId;\n    },\n    getRankClass: function getRankClass(rank) {\n      if (rank === 1) return 'rank-1';\n      if (rank === 2) return 'rank-2';\n      if (rank === 3) return 'rank-3';\n      return '';\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URLS","axiosConfig","requestInterceptor","responseInterceptor","api","create","interceptors","request","use","error","Promise","reject","response","success","getBaseUrl","host","window","location","hostname","port","protocol","concat","data","leaderboard","userRank","username","limit","currentPage","pageSize","loading","errorMessage","apiBaseUrl","totalUserCount","isNewUser","registrationDate","currentUserRank","currentUserCarbonReduction","currentPageData","computed","totalPages","Math","ceil","length","displayedLeaderboard","start","end","slice","created","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","userResponse","thirtyDaysAgo","urlParams","rankParam","reductionParam","wrap","_callee$","_context","prev","next","console","log","localStorage","getItem","$router","push","abrupt","get","headers","Authorization","sent","created_at","Date","setDate","getDate","URLSearchParams","search","loadLeaderboard","t0","updateLeaderboard","t1","handleError","t2","stop","methods","getInitials","name","charCodeAt","charAt","toUpperCase","getRankDescription","rank","getPercentile","percentile","floor","max","min","getRankIconClass","getRankColorClass","defaultMessage","errorMsg","message","_this2","_callee2","_callee2$","_context2","Error","params","_typeof","Array","isArray","totalCount","calculatePagination","getUserRankOnly","totalReduction","warn","finish","_this3","_callee3","_callee3$","_context3","totalItems","startIndex","endIndex","changePage","pageNumber","_arguments","arguments","_this4","_callee4","isAutoRetry","updateResponse","userPage","_callee4$","_context4","undefined","post","showSuccessNotification","isCurrentUser","userId","user_id","getRankClass"],"sources":["D:\\EcoPaw\\carbonfootprint_本地版\\src\\components\\Leaderboard.vue"],"sourcesContent":["<template>\n  <div class=\"leaderboard-page\">\n    <h2 class=\"page-title\">碳减排排行榜</h2>\n    \n    <div v-if=\"errorMessage\" class=\"error-message\">\n      <i class=\"fas fa-exclamation-circle\"></i>\n      {{ errorMessage }}\n    </div>\n    \n    <!-- 用户自己的排名信息卡片，更美观的展示 -->\n    <div class=\"user-rank-card\">\n      <div class=\"user-rank-header\">\n        <div class=\"user-avatar-and-info\">\n          <div class=\"user-avatar\">\n            <span v-if=\"username\">{{ getInitials(username) }}</span>\n            <span v-else><i class=\"fas fa-user\"></i></span>\n          </div>\n          <div class=\"user-info\">\n            <h3>{{ username || '未能获取用户名' }}</h3>\n            <div class=\"user-status\">您当前的碳减排状态</div>\n            <div class=\"user-badges\" v-if=\"userRank\">\n              <span v-if=\"userRank.rank <= 3\" class=\"badge top-badge\" title=\"排名前三\">\n                <i class=\"fas fa-crown\"></i>\n              </span>\n              <span v-if=\"userRank.carbon_reduction >= 100\" class=\"badge century-badge\" title=\"减排量超过100kg\">\n                <i class=\"fas fa-medal\"></i>\n              </span>\n              <span v-if=\"userRank.carbon_reduction >= 50\" class=\"badge progress-badge\" title=\"减排量超过50kg\">\n                <i class=\"fas fa-award\"></i>\n              </span>\n              <span v-if=\"isNewUser\" class=\"badge newcomer-badge\" title=\"新用户\">\n                <i class=\"fas fa-seedling\"></i>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div v-if=\"userRank\" class=\"rank-badge\" :class=\"getRankColorClass(userRank.rank)\">\n          #{{ userRank.rank }}\n        </div>\n        <div v-else class=\"rank-badge loading-rank\">\n          <span>#{{ currentUserRank || '?' }}</span>\n        </div>\n      </div>\n      \n      <div class=\"user-stats\">\n        <div class=\"stat-item\">\n          <div class=\"stat-value carbon-value\">\n            {{ userRank ? Number(userRank.carbon_reduction).toFixed(1) : (currentUserCarbonReduction || '加载中...') }}\n          </div>\n          <div class=\"stat-label\">减排量 (kg CO₂)</div>\n        </div>\n        \n        <div class=\"stat-item\">\n          <div class=\"stat-value\">\n            <i v-if=\"userRank\" class=\"fas fa-trophy\" :class=\"getRankIconClass(userRank.rank)\"></i>\n            <i v-else class=\"fas fa-trophy text-normal\"></i>\n          </div>\n          <div class=\"stat-label\">{{ userRank ? getRankDescription(userRank.rank) : '活跃减排者' }}</div>\n        </div>\n        \n        <div class=\"stat-divider\"></div>\n        \n        <div class=\"stat-item\">\n          <div class=\"stat-value achievement\">\n            <span class=\"percentage\">{{ userRank ? getPercentile(userRank.rank) : '81' }}%</span>\n          </div>\n          <div class=\"stat-label\">击败了其他用户</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"leaderboard-controls\">\n      <div class=\"update-section\">\n        <button @click=\"updateLeaderboard\" class=\"update-btn\" :disabled=\"loading\">\n          <i class=\"fas fa-sync-alt\" :class=\"{ 'fa-spin': loading }\"></i>\n          {{ loading ? '更新中...' : '更新排名' }}\n        </button>\n      </div>\n      \n      <div class=\"filter-section\">\n        <select v-model=\"limit\" @change=\"loadLeaderboard\" class=\"filter-select\">\n          <option :value=\"10\">显示10名</option>\n          <option :value=\"20\">显示20名</option>\n          <option :value=\"50\">显示50名</option>\n          <option :value=\"100\">显示100名</option>\n        </select>\n      </div>\n    </div>\n    \n    <div class=\"leaderboard-container\">\n      <div class=\"leaderboard-table\">\n        <table>\n          <thead>\n            <tr>\n              <th class=\"rank-cell\">排名</th>\n              <th>用户</th>\n              <th>减排量 (kg CO₂)</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(entry, index) in displayedLeaderboard\" :key=\"index\" \n                :class=\"{ 'current-user': isCurrentUser(entry.user_id) }\"\n                :style=\"{ '--row-index': index }\">\n              <td class=\"rank-cell\">\n                <div class=\"rank-number\" :class=\"getRankClass(entry.rank)\">\n                  <template v-if=\"entry.rank <= 3\">\n                    <span>{{ entry.rank }}</span>\n                  </template>\n                  <template v-else>\n                    {{ entry.rank }}\n                  </template>\n                </div>\n              </td>\n              <td>\n                <div class=\"user-info-row\">\n                  <div class=\"user-avatar-small\" :class=\"{ 'current-user': isCurrentUser(entry.user_id) }\">\n                    {{ getInitials(entry.username) }}\n                  </div>\n                  <span>{{ entry.username }}</span>\n                  <span v-if=\"isCurrentUser(entry.user_id)\" class=\"current-user-tag\">当前用户</span>\n                </div>\n              </td>\n              <td>{{ Number(entry.carbon_reduction).toFixed(1) }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      \n      <div v-if=\"leaderboard.length === 0\" class=\"no-data\">\n        暂无排行数据\n      </div>\n    </div>\n    \n    <!-- 分页控件 -->\n    <div class=\"pagination\" v-if=\"leaderboard.length > 0\">\n      <button \n        @click=\"changePage(currentPage - 1)\" \n        :disabled=\"currentPage === 1\"\n        class=\"pagination-btn\"\n      >\n        <i class=\"fas fa-chevron-left\"></i>\n      </button>\n      \n      <div class=\"page-info\">\n        第 {{ currentPage }} 页 / 共 {{ totalPages }} 页\n      </div>\n      \n      <button \n        @click=\"changePage(currentPage + 1)\" \n        :disabled=\"currentPage === totalPages\"\n        class=\"pagination-btn\"\n      >\n        <i class=\"fas fa-chevron-right\"></i>\n      </button>\n    </div>\n    \n    <div class=\"total-entries\" v-if=\"leaderboard.length > 0\">\n      展示第 {{ (currentPage - 1) * pageSize + 1 }} - {{ Math.min(currentPage * pageSize, leaderboard.length) }} 条，\n      共 {{ leaderboard.length }} 条记录\n    </div>\n    \n    <div class=\"leaderboard-tips\">\n      <h3>如何提高排名?</h3>\n      <ul>\n        <li><i class=\"fas fa-walking\"></i> 多步行减少碳排放</li>\n        <li><i class=\"fas fa-calculator\"></i> 通过碳排放计算器记录您的低碳行为</li>\n        <li><i class=\"fas fa-paw\"></i> 喂养并升级您的虚拟宠物</li>\n        <li><i class=\"fas fa-award\"></i> 完成成就任务获得额外奖励</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_URLS, axiosConfig, requestInterceptor, responseInterceptor } from '../config/api';\n\n// 创建API实例\nconst api = axios.create(axiosConfig);\n\n// 添加请求拦截器\napi.interceptors.request.use(requestInterceptor, error => Promise.reject(error));\n\n// 添加响应拦截器\napi.interceptors.response.use(\n  responseInterceptor.success, \n  responseInterceptor.error\n);\n\n// 获取API基础URL\nconst getBaseUrl = () => {\n  const host = window.location.hostname;\n  const port = '5000';\n  const protocol = window.location.protocol;\n  \n  if (host === 'localhost' || host === '127.0.0.1') {\n    return `http://localhost:${port}/api`;\n  } else {\n    return `${protocol}//${host}:${port}/api`;\n  }\n};\n\nexport default {\n  data() {\n    return {\n      leaderboard: [],\n      userRank: null,\n      username: '',\n      limit: 10,\n      currentPage: 1,\n      pageSize: 10,\n      loading: false,\n      errorMessage: '',\n      apiBaseUrl: getBaseUrl(),\n      totalUserCount: 200, // 估计的用户总数，可以从后端获取\n      isNewUser: false,\n      registrationDate: null,\n      currentUserRank: null,\n      currentUserCarbonReduction: null,\n      currentPageData: []\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.leaderboard.length / this.pageSize);\n    },\n    displayedLeaderboard() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.leaderboard.slice(start, end);\n    }\n  },\n  async created() {\n    try {\n      console.log('API基础URL:', this.apiBaseUrl);\n      \n      const token = localStorage.getItem('token');\n      if (!token) {\n        this.$router.push('/login');\n        return;\n      }\n      \n      // 获取用户信息\n      const userResponse = await axios.get(`${this.apiBaseUrl}/auth/user`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      if (userResponse.data && userResponse.data.username) {\n        this.username = userResponse.data.username;\n        console.log('成功获取用户信息:', this.username);\n      } else {\n        console.error('未能获取到用户名:', userResponse.data);\n        this.username = localStorage.getItem('username') || '';\n      }\n\n      if (userResponse.data.created_at) {\n        this.registrationDate = new Date(userResponse.data.created_at);\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        this.isNewUser = this.registrationDate > thirtyDaysAgo;\n      }\n      \n      // 尝试从URL参数获取排名信息\n      const urlParams = new URLSearchParams(window.location.search);\n      const rankParam = urlParams.get('rank');\n      const reductionParam = urlParams.get('reduction');\n      \n      if (rankParam) {\n        this.currentUserRank = rankParam;\n      }\n      \n      if (reductionParam) {\n        this.currentUserCarbonReduction = reductionParam;\n      }\n      \n      try {\n        // 加载排行榜数据\n        await this.loadLeaderboard();\n      } catch (loadError) {\n        console.error('排行榜加载失败，尝试自动更新排行榜:', loadError);\n        // 如果排行榜加载失败，尝试更新排行榜\n        await this.updateLeaderboard(true);\n      }\n\n      // 如果排行榜加载成功但还没有用户名，尝试从排行榜数据中获取\n      if (!this.username && this.userRank) {\n        this.username = this.userRank.username;\n      }\n    } catch (error) {\n      console.error('Error loading user data:', error);\n      // 如果API调用失败，尝试从localStorage获取用户名\n      this.username = localStorage.getItem('username') || '';\n      this.handleError(error, '加载用户数据失败');\n      \n      // 如果是首次加载失败，可能需要初始化用户排名，尝试调用updateLeaderboard\n      try {\n        console.log('尝试通过更新排行榜初始化用户数据...');\n        await this.updateLeaderboard(true);\n      } catch (updateError) {\n        console.error('初始化排行榜失败:', updateError);\n      }\n    }\n  },\n  methods: {\n    // 获取用户名的首字母作为头像\n    getInitials(name) {\n      if (!name) return '?';\n      \n      // 对于双字节字符（如中文），只取第一个字符\n      if (name.charCodeAt(0) > 127) {\n        return name.charAt(0);\n      }\n      \n      // 对于英文等单字节字符，取首字母\n      return name.charAt(0).toUpperCase();\n    },\n    \n    // 获取排名描述\n    getRankDescription(rank) {\n      if (rank <= 10) return '优秀减排者';\n      if (rank <= 50) return '活跃减排者';\n      if (rank <= 100) return '进步减排者';\n      return '环保新手';\n    },\n    \n    // 获取百分比\n    getPercentile(rank) {\n      // 计算击败了多少百分比的用户\n      // 例如：如果总用户数是200，当前排名是20，则击败了(200-20)/200 * 100 = 90%的用户\n      const percentile = Math.floor(((this.totalUserCount - rank) / this.totalUserCount) * 100);\n      return Math.max(0, Math.min(99, percentile));\n    },\n    \n    // 获取排名图标类\n    getRankIconClass(rank) {\n      if (rank <= 3) return 'text-gold';\n      if (rank <= 10) return 'text-silver';\n      if (rank <= 50) return 'text-bronze';\n      return 'text-normal';\n    },\n    \n    // 获取排名颜色类\n    getRankColorClass(rank) {\n      if (rank <= 3) return 'rank-top';\n      if (rank <= 10) return 'rank-excellent';\n      if (rank <= 50) return 'rank-good';\n      return 'rank-normal';\n    },\n    \n    // 处理错误的通用方法\n    handleError(error, defaultMessage) {\n      let errorMsg = defaultMessage;\n      \n      if (error.response && error.response.data && error.response.data.message) {\n        errorMsg = error.response.data.message;\n      } else if (error.message) {\n        errorMsg = `${defaultMessage}: ${error.message}`;\n      }\n      \n      this.errorMessage = errorMsg;\n      console.error(errorMsg, error);\n    },\n    \n    async loadLeaderboard() {\n      this.error = null;\n      this.loading = true;\n      \n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('用户未登录，请先登录');\n        }\n        \n        console.log('正在加载排行榜数据...');\n        const response = await axios.get(`${this.apiBaseUrl}/leaderboard`, {\n          headers: { \n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          },\n          params: {\n            limit: this.limit // 添加limit参数传递给API\n          }\n        });\n        \n        // 验证响应数据格式\n        if (!response.data) {\n          throw new Error('排行榜数据为空');\n        }\n        \n        if (typeof response.data !== 'object') {\n          throw new Error('排行榜数据格式不正确');\n        }\n        \n        // 处理排行榜数据\n        if (Array.isArray(response.data.leaderboard)) {\n          console.log(`获取到${response.data.leaderboard.length}条排行榜记录`);\n          this.leaderboard = response.data.leaderboard;\n          this.totalUserCount = response.data.totalCount || this.leaderboard.length;\n          \n          // 保持每页显示固定数量（10条）\n          this.pageSize = 10;\n          \n          // 计算分页\n          this.calculatePagination();\n        } else {\n          console.error('排行榜数据格式不正确，尝试获取用户排名');\n          await this.getUserRankOnly();\n          throw new Error('排行榜数据格式不正确');\n        }\n        \n        // 处理用户排名数据\n        if (response.data.userRank) {\n          this.userRank = response.data.userRank;\n          this.currentUserRank = response.data.userRank.rank;\n          this.currentUserCarbonReduction = response.data.userRank.totalReduction || 0;\n          console.log('当前用户排名:', this.currentUserRank);\n        } else {\n          console.warn('排行榜响应中没有用户排名数据，尝试单独获取');\n          await this.getUserRankOnly();\n        }\n        \n        this.error = null;\n      } catch (error) {\n        console.error('加载排行榜失败:', error);\n        this.error = error.message || '加载排行榜失败';\n        \n        // 如果排行榜加载失败，尝试单独获取用户排名\n        if (!this.currentUserRank) {\n          console.log('尝试单独获取用户排名...');\n          await this.getUserRankOnly();\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // 仅获取用户排名，不修改减碳总量\n    async getUserRankOnly() {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          console.error('用户未登录，无法获取排名');\n          return;\n        }\n        \n        console.log('单独获取用户排名数据...');\n        const response = await axios.get(`${this.apiBaseUrl}/user/rank`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        if (response.data && response.data.rank) {\n          console.log('获取到用户排名:', response.data);\n          this.currentUserRank = response.data.rank;\n          \n          if (response.data.totalReduction) {\n            this.currentUserCarbonReduction = response.data.totalReduction;\n          }\n          \n          // 更新本地用户排名数据\n          this.userRank = response.data;\n          \n          return response.data;\n        } else {\n          console.error('用户排名数据格式不正确:', response.data);\n          return null;\n        }\n      } catch (error) {\n        console.error('获取用户排名失败:', error);\n        return null;\n      }\n    },\n    \n    calculatePagination() {\n      // 计算总页数\n      if (this.leaderboard && this.leaderboard.length > 0) {\n        const totalItems = this.leaderboard.length;\n        this.totalPages = Math.ceil(totalItems / this.pageSize);\n        \n        // 确保当前页在有效范围内\n        if (this.currentPage < 1) {\n          this.currentPage = 1;\n        } else if (this.currentPage > this.totalPages) {\n          this.currentPage = this.totalPages;\n        }\n        \n        // 计算当前页的数据\n        const startIndex = (this.currentPage - 1) * this.pageSize;\n        const endIndex = Math.min(startIndex + this.pageSize, this.leaderboard.length);\n        this.currentPageData = this.leaderboard.slice(startIndex, endIndex);\n        \n        console.log(`分页: 第${this.currentPage}页，共${this.totalPages}页，显示${this.currentPageData.length}条记录，每页${this.pageSize}条`);\n      } else {\n        this.currentPageData = [];\n        this.totalPages = 0;\n        this.currentPage = 1;\n      }\n    },\n    \n    changePage(pageNumber) {\n      if (pageNumber >= 1 && pageNumber <= this.totalPages) {\n        this.currentPage = pageNumber;\n        console.log(`切换到第${this.currentPage}页，显示${this.pageSize}条记录`);\n      }\n    },\n    \n    async updateLeaderboard(isAutoRetry = false) {\n      try {\n        this.loading = true;\n        this.errorMessage = '';\n        \n        const token = localStorage.getItem('token');\n        if (!token) {\n          this.$router.push('/login');\n          return;\n        }\n        \n        console.log('开始更新排行榜，将刷新用户排名信息...');\n        \n        // 直接使用axios更新排名（不会修改减碳总量）\n        const updateResponse = await axios.post(`${this.apiBaseUrl}/leaderboard/update`, {}, {\n          headers: { \n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json' \n          }\n        });\n        \n        console.log('排名更新响应:', updateResponse.data);\n        \n        if (updateResponse.data && updateResponse.data.rank) {\n          console.log(`用户排名已更新为第 ${updateResponse.data.rank} 名`);\n          \n          if (this.userRank) {\n            // 只更新排名，保持减碳量不变\n            this.userRank.rank = updateResponse.data.rank;\n          }\n          \n          // 更新当前用户的排名\n          this.currentUserRank = updateResponse.data.rank;\n          \n          // 重新加载排行榜数据以获取完整的排行榜，不仅仅是当前用户\n          await this.loadLeaderboard();\n          \n          // 计算并跳转至包含当前用户排名的页面\n          if (this.currentUserRank) {\n            const userPage = Math.ceil(this.currentUserRank / this.pageSize);\n            if (userPage > 0 && userPage <= this.totalPages) {\n              this.currentPage = userPage;\n              console.log(`跳转到包含用户排名的页面: 第${this.currentPage}页`);\n            }\n          }\n        } else {\n          console.error('更新排名响应数据格式不正确:', updateResponse.data);\n          // 如果更新失败，并且不是自动重试，则重新加载最新数据\n          await this.loadLeaderboard();\n        }\n        \n        this.errorMessage = '';\n        if (!isAutoRetry) {\n          this.showSuccessNotification('排行榜更新成功');\n        }\n      } catch (error) {\n        this.handleError(error, '更新排行榜失败');\n        // 如果是自动重试过程中的错误，显示友好提示\n        if (isAutoRetry) {\n          this.errorMessage = '获取排行榜数据失败，请稍后手动点击刷新按钮重试';\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // 显示成功通知\n    showSuccessNotification(message) {\n      // 如果组件有相关的通知系统，可以在这里实现\n      console.log('成功:', message);\n    },\n    \n    isCurrentUser(userId) {\n      return this.userRank && this.userRank.user_id === userId;\n    },\n    \n    getRankClass(rank) {\n      if (rank === 1) return 'rank-1';\n      if (rank === 2) return 'rank-2';\n      if (rank === 3) return 'rank-3';\n      return '';\n    }\n  }\n};\n</script>\n\n<style scoped>\n.leaderboard-page {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n  position: relative;\n}\n\n/* 添加新的背景样式 */\n.leaderboard-page::before {\n  content: '';\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('../assets/carbon_7.jpg');\n  background-size: cover;\n  background-position: center;\n  background-attachment: fixed;\n  filter: brightness(0.9) saturate(1.1);\n  z-index: -1;\n  opacity: 0.9;\n}\n\n.page-title {\n  color: #1e3d59;\n  text-align: center;\n  margin-bottom: 0.5rem;\n  font-size: 32px;\n  font-weight: 600;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.main-title {\n  display: none;\n}\n\n.user-rank-card {\n  background: linear-gradient(135deg, rgba(187, 222, 251, 0.85) 0%, rgba(227, 242, 253, 0.85) 100%);\n  border-radius: 10px;\n  overflow: hidden;\n  margin-bottom: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  animation: slideInFromTop 0.8s ease-out;\n  width: 100%;\n  margin: 0 auto 20px auto;\n  backdrop-filter: blur(5px);\n}\n\n@keyframes slideInFromTop {\n  0% {\n    opacity: 0;\n    transform: translateY(-30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.user-rank-header {\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  background-color: rgba(255, 255, 255, 0.2);\n  position: relative;\n  justify-content: space-between;\n}\n\n.user-avatar-and-info {\n  display: flex;\n  align-items: center;\n}\n\n.user-info {\n  margin-left: 15px;\n}\n\n.user-avatar {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #2196F3, #03A9F4);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  font-weight: bold;\n  box-shadow: 0 3px 10px rgba(33, 150, 243, 0.5);\n  text-transform: uppercase;\n  position: relative;\n  overflow: hidden;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  animation: pulse 2s infinite;\n}\n\n.user-avatar:hover {\n  transform: scale(1.05);\n  box-shadow: 0 5px 15px rgba(33, 150, 243, 0.7);\n}\n\n.user-info h3 {\n  margin: 0 0 4px 0; /* 减小下边距 */\n  font-size: 1.2rem; /* 减小字体大小 */\n  color: #333;\n  font-weight: 600;\n}\n\n.user-status {\n  color: #555;\n  font-size: 0.8rem; /* 减小字体大小 */\n  margin-bottom: 3px; /* 减小下边距 */\n}\n\n.user-badges {\n  display: flex;\n  gap: 5px;\n}\n\n.badge {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 22px;\n  height: 22px;\n  border-radius: 50%;\n  font-size: 0.7rem;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  position: relative;\n  overflow: hidden;\n  margin-right: 4px;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.badge:hover {\n  transform: scale(1.2);\n  box-shadow: 0 3px 8px rgba(0,0,0,0.15);\n}\n\n.top-badge {\n  background: linear-gradient(135deg, #FFD700, #FFA500);\n  color: white;\n}\n\n.century-badge {\n  background: linear-gradient(135deg, #2196F3, #03A9F4);\n  color: white;\n}\n\n.progress-badge {\n  background: linear-gradient(135deg, #4CAF50, #8BC34A);\n  color: white;\n}\n\n.newcomer-badge {\n  background: linear-gradient(135deg, #9C27B0, #E040FB);\n  color: white;\n}\n\n/* 增加排名徽章的动画效果 */\n.rank-badge {\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.rank-badge:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n\n.loading-rank {\n  background: linear-gradient(135deg, #9E9E9E, #757575);\n}\n\n@keyframes pulse {\n  0% {\n    box-shadow: 0 0 0 0 rgba(33, 150, 243, 0.4);\n  }\n  70% {\n    box-shadow: 0 0 0 10px rgba(33, 150, 243, 0);\n  }\n  100% {\n    box-shadow: 0 0 0 0 rgba(33, 150, 243, 0);\n  }\n}\n\n.rank-badge {\n  font-size: 1.8rem; /* 增大字体大小 */\n  font-weight: bold;\n  padding: 6px 12px;\n  border-radius: 8px;\n  color: white;\n  box-shadow: 0 3px 8px rgba(0,0,0,0.15);\n  margin-left: auto; /* 推向右侧 */\n  background: linear-gradient(135deg, #1976D2, #2196F3); /* 调整颜色使其更突出 */\n  position: relative;\n  overflow: hidden;\n}\n\n.rank-badge::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(135deg, rgba(255,255,255,0.3), rgba(255,255,255,0));\n  opacity: 0.6;\n}\n\n.rank-top {\n  background: linear-gradient(135deg, #F57C00, #FF9800);\n  box-shadow: 0 3px 10px rgba(255, 152, 0, 0.5);\n}\n\n.rank-excellent {\n  background: linear-gradient(135deg, #1976D2, #2196F3);\n  box-shadow: 0 3px 10px rgba(33, 150, 243, 0.5);\n}\n\n.rank-good {\n  background: linear-gradient(135deg, #388E3C, #4CAF50);\n  box-shadow: 0 3px 10px rgba(76, 175, 80, 0.5);\n}\n\n.rank-normal {\n  background: linear-gradient(135deg, #5E35B1, #7E57C2);\n  box-shadow: 0 3px 10px rgba(126, 87, 194, 0.5);\n}\n\n.user-stats {\n  display: flex;\n  padding: 10px 12px; /* 减小内边距 */\n  background-color: rgba(255,255,255,0.7);\n  justify-content: space-around;\n}\n\n.stat-item {\n  flex: 1;\n  text-align: center;\n  padding: 10px 8px; /* 减小内边距 */\n}\n\n.stat-value {\n  font-size: 1.3rem; /* 减小字体大小 */\n  font-weight: bold;\n  color: #2196F3;\n  margin-bottom: 5px; /* 减小下边距 */\n}\n\n.carbon-value {\n  font-size: 1.6rem; /* 减小字体大小 */\n  background: linear-gradient(135deg, #2196F3, #03A9F4);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  animation: floatAnimation 4s ease-in-out infinite;\n  display: inline-block;\n}\n\n.stat-label {\n  font-size: 0.75rem; /* 减小字体大小 */\n  color: #555;\n  font-weight: 500;\n}\n\n.stat-divider {\n  width: 1px;\n  background-color: rgba(0,0,0,0.1);\n  margin: 8px 4px;\n}\n\n.text-gold {\n  color: #F57C00;\n}\n\n.text-silver {\n  color: #607D8B;\n}\n\n.text-bronze {\n  color: #795548;\n}\n\n.leaderboard-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px; /* 减小下边距 */\n  background-color: rgba(255, 255, 255, 0.85); /* 调整为半透明背景以配合新背景图片 */\n  padding: 12px 18px; /* 减小内边距 */\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.05);\n  backdrop-filter: blur(5px);\n}\n\n.error-message {\n  background-color: #ffebee;\n  color: #d32f2f;\n  padding: 12px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.error-message i {\n  font-size: 20px;\n}\n\n.update-btn {\n  background: linear-gradient(135deg, #2196F3, #03A9F4);\n  color: white;\n  border: none;\n  border-radius: 25px;\n  padding: 10px 20px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  transition: all 0.3s;\n  font-weight: 500;\n  box-shadow: 0 3px 8px rgba(33,150,243,0.3);\n  font-size: 0.95rem;\n}\n\n.update-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1976D2, #0288D1);\n  transform: translateY(-2px);\n  box-shadow: 0 5px 12px rgba(33,150,243,0.4);\n}\n\n.filter-select {\n  padding: 10px 15px;\n  border-radius: 25px;\n  border: 1px solid #e0e0e0;\n  background-color: white;\n  font-size: 0.95rem;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n  cursor: pointer;\n  min-width: 130px;\n  color: #424242;\n  transition: all 0.3s;\n}\n\n.filter-select:hover {\n  border-color: #2196F3;\n  box-shadow: 0 2px 8px rgba(33,150,243,0.2);\n}\n\n.leaderboard-container {\n  background-color: rgba(255, 255, 255, 0.85); /* 调整为半透明背景以配合新背景图片 */\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n  margin-bottom: 25px;\n  min-height: 300px;\n  position: relative;\n  width: 100%;\n  backdrop-filter: blur(5px);\n}\n\n.leaderboard-table {\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: separate;\n  background-color: #fff;\n  border-radius: 12px;\n  overflow: hidden;\n}\n\n.leaderboard-table table {\n  width: 100%;\n}\n\n.leaderboard-table th {\n  text-align: left;\n  padding: 18px 22px;\n  color: #424242;\n  font-weight: 600;\n  font-size: 0.9rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  background-color: rgba(246, 248, 250, 0.85);\n  border-bottom: 1px solid #E6EBF1;\n}\n\n.leaderboard-table td {\n  padding: 16px 22px;\n  border-bottom: 1px solid #E6EBF1;\n  color: #24292F;\n  font-size: 1rem;\n  background-color: rgba(255, 255, 255, 0.75);\n}\n\n.user-info-row {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.user-avatar-small {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #90CAF9, #64B5F6);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n  font-weight: bold;\n  text-transform: uppercase;\n  flex-shrink: 0;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.1);\n  transition: transform 0.2s ease;\n}\n\n.user-avatar-small:hover {\n  transform: scale(1.1);\n}\n\n.user-avatar-small.current-user {\n  background: linear-gradient(135deg, #2196F3, #03A9F4);\n  box-shadow: 0 3px 8px rgba(33,150,243,0.4);\n}\n\n.current-user-tag {\n  display: inline-block;\n  font-size: 0.7rem;\n  background: linear-gradient(135deg, #2196F3, #03A9F4);\n  color: white;\n  padding: 3px 8px;\n  border-radius: 12px;\n  margin-left: 8px;\n  vertical-align: middle;\n  font-weight: bold;\n  box-shadow: 0 2px 4px rgba(33,150,243,0.3);\n}\n\n.leaderboard-tips {\n  background-color: rgba(245, 245, 245, 0.8);\n  border-radius: 8px;\n  padding: 20px;\n  margin-top: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n  backdrop-filter: blur(5px);\n}\n\n.leaderboard-tips h3 {\n  color: #1976D2;\n  margin-top: 0;\n  margin-bottom: 15px;\n  font-size: 1.2rem;\n}\n\n.leaderboard-tips ul {\n  padding-left: 10px;\n  margin: 0;\n  list-style-type: none;\n}\n\n.leaderboard-tips li {\n  margin-bottom: 10px;\n  color: #555;\n  display: flex;\n  align-items: center;\n}\n\n.leaderboard-tips li i {\n  color: #2196F3;\n  margin-right: 10px;\n  width: 20px;\n  text-align: center;\n}\n\n/* 分页样式 */\n.pagination {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 25px 0;\n  gap: 15px;\n}\n\n.pagination-btn {\n  background-color: rgba(255, 255, 255, 0.85);\n  border: none;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.3s;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n  color: #2196F3;\n  font-size: 1rem;\n  backdrop-filter: blur(3px);\n}\n\n.pagination-btn:hover:not(:disabled) {\n  background-color: #2196F3;\n  color: white;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 10px rgba(33,150,243,0.3);\n}\n\n.page-info, .total-entries {\n  font-size: 0.9rem;\n  color: #444;\n  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.5);\n  background-color: rgba(255, 255, 255, 0.5);\n  padding: 5px 10px;\n  border-radius: 20px;\n  backdrop-filter: blur(2px);\n}\n\n.total-entries {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n@media (max-width: 768px) {\n  .page-title {\n    font-size: 28px;\n  }\n  .leaderboard-controls {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 10px;\n  }\n  \n  .user-rank-header {\n    padding: 12px 15px;\n    flex-direction: row; /* 在移动端保持水平布局 */\n    text-align: left;\n    align-items: center;\n    justify-content: space-between; /* 两端对齐 */\n  }\n  \n  .user-avatar-and-info {\n    flex-direction: column; /* 在移动端将头像和信息垂直排列 */\n    align-items: flex-start;\n  }\n  \n  .user-avatar {\n    width: 45px; /* 在移动端进一步缩小 */\n    height: 45px;\n    font-size: 1.3rem;\n    margin-right: 0;\n    margin-bottom: 10px;\n  }\n  \n  .rank-badge {\n    margin-top: 0; /* 移除顶部边距 */\n    padding: 5px 10px; /* 减小内边距 */\n    font-size: 1.5rem; /* 减小字体大小 */\n    align-self: flex-start; /* 靠上对齐 */\n  }\n  \n  .user-stats {\n    flex-direction: column;\n    padding: 0;\n  }\n  \n  .stat-divider {\n    height: 1px;\n    width: 80%;\n    margin: 2px auto;\n  }\n  \n  .stat-item {\n    padding: 8px 5px;\n  }\n  \n  .carbon-value {\n    font-size: 1.6rem;\n  }\n  \n  .stat-value {\n    font-size: 1.3rem;\n    margin-bottom: 3px;\n  }\n}\n\n.achievement {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.percentage {\n  font-weight: bold;\n  color: #ff9800;\n  text-shadow: 0 1px 2px rgba(0,0,0,0.1);\n}\n\n.achievement:after {\n  content: '';\n  position: absolute;\n  width: 110%;\n  height: 5px;\n  bottom: -4px;\n  left: -5%;\n  background: linear-gradient(90deg, #ff9800, #ffeb3b);\n  border-radius: 3px;\n}\n\n.rank-cell {\n  width: 50px;\n  font-weight: 600;\n}\n\n.top-rank {\n  font-weight: 700;\n  font-size: 1.1rem;\n}\n\n.rank-1, .rank-2, .rank-3 {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.rank-1 {\n  background: linear-gradient(135deg, #FFD700, #FFA500);\n}\n\n.rank-2 {\n  background: linear-gradient(135deg, #E0E0E0, #B0B0B0);\n}\n\n.rank-3 {\n  background: linear-gradient(135deg, #CD7F32, #8B4513);\n}\n\n.user-column {\n  flex: 1;\n  padding: 0 10px;\n  position: relative;\n}\n\n.update-btn i.fa-spin {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes floatAnimation {\n  0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-8px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n\n.leaderboard-table tr {\n  transition: background-color 0.15s ease;\n  animation: fadeIn 0.5s ease-out;\n  animation-fill-mode: both;\n  animation-delay: calc(var(--row-index, 0) * 0.1s);\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.leaderboard-table tr:hover {\n  background-color: #F6F8FA;\n}\n\n.leaderboard-table tr.current-user {\n  background-color: rgba(33, 150, 243, 0.05) !important;\n  animation: highlightRow 2s infinite alternate;\n  position: relative;\n  z-index: 1;\n}\n\n@keyframes highlightRow {\n  from { background-color: rgba(33, 150, 243, 0.05); }\n  to { background-color: rgba(33, 150, 243, 0.15); }\n}\n\n.leaderboard-table tr:last-child td {\n  border-bottom: none;\n}\n\n.no-data {\n  padding: 30px;\n  text-align: center;\n  color: #999;\n  font-size: 1.1rem;\n}\n\n.loading-indicator {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px;\n  color: #666;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-radius: 50%;\n  border-top-color: #2196F3;\n  animation: spin 1s ease-in-out infinite;\n  margin-bottom: 15px;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.pagination-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.update-btn:disabled {\n  background: linear-gradient(135deg, #90CAF9, #64B5F6);\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n.loading-rank {\n  background-color: #9E9E9E;\n  animation: pulse 1.5s infinite;\n}\n\n.text-normal {\n  color: #9E9E9E;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}