{"ast":null,"code":"import _regeneratorRuntime from \"D:/EcoPaw/carbonfootprint/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/EcoPaw/carbonfootprint/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\nvar api = axios.create(axiosConfig);\nexport default {\n  data: function data() {\n    return {\n      username: '',\n      password: '',\n      captcha: '',\n      displayCaptcha: '0000',\n      // 显示的验证码，初始值仅作占位\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false\n    };\n  },\n  computed: {\n    isFormValid: function isFormValid() {\n      return this.username.trim() && this.password && this.captcha.trim().length === 4;\n    }\n  },\n  created: function created() {\n    if (localStorage.getItem('token')) {\n      var redirect = this.$route.query.redirect || '/';\n      this.$router.push(redirect);\n    } else {\n      // 初始化生成随机验证码\n      this.generateCaptcha();\n    }\n  },\n  methods: {\n    clearError: function clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword: function togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    // 生成4位随机数字验证码\n    generateCaptcha: function generateCaptcha() {\n      // 生成四位随机数字\n      var randomNum = Math.floor(1000 + Math.random() * 9000);\n      this.displayCaptcha = randomNum.toString();\n    },\n    // 刷新验证码\n    refreshCaptcha: function refreshCaptcha() {\n      this.generateCaptcha();\n      this.captcha = ''; // 清空用户输入的验证码\n    },\n    handleSubmit: function handleSubmit() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var loginData, response, redirect, status, errorData, _redirect;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.isFormValid) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              if (!(_this.captcha !== _this.displayCaptcha)) {\n                _context.next = 5;\n                break;\n              }\n              _this.errorMessage = '验证码错误，请重新输入';\n              return _context.abrupt(\"return\");\n            case 5:\n              _this.isLoading = true;\n              _this.errorMessage = '';\n              _context.prev = 7;\n              loginData = {\n                username: _this.username.trim(),\n                password: _this.password.trim(),\n                captcha: _this.captcha.trim()\n              };\n              console.log('正在发送登录请求:', {\n                url: \"\".concat(axiosConfig.baseURL).concat(API_URLS.login),\n                username: loginData.username\n              });\n              _context.prev = 10;\n              _context.next = 13;\n              return api.post(API_URLS.login, loginData);\n            case 13:\n              response = _context.sent;\n              console.log('服务器响应:', response.data);\n              if (!(response.data && response.data.token)) {\n                _context.next = 22;\n                break;\n              }\n              // 登录成功\n              localStorage.setItem('token', response.data.token);\n              localStorage.setItem('username', _this.username.trim());\n              redirect = _this.$route.query.redirect || '/';\n              _context.next = 21;\n              return _this.$router.push(redirect);\n            case 21:\n              return _context.abrupt(\"return\");\n            case 22:\n              if (!(response.data && response.data.message)) {\n                _context.next = 25;\n                break;\n              }\n              _this.errorMessage = response.data.message;\n              return _context.abrupt(\"return\");\n            case 25:\n              _context.next = 45;\n              break;\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](10);\n              console.error('API调用错误:', _context.t0);\n\n              // 处理API错误响应\n              if (!_context.t0.response) {\n                _context.next = 44;\n                break;\n              }\n              status = _context.t0.response.status;\n              errorData = _context.t0.response.data;\n              _context.t1 = status;\n              _context.next = _context.t1 === 401 ? 36 : _context.t1 === 403 ? 38 : _context.t1 === 500 ? 40 : 42;\n              break;\n            case 36:\n              _this.errorMessage = '账号或密码错误';\n              return _context.abrupt(\"break\", 43);\n            case 38:\n              _this.errorMessage = '验证码错误';\n              return _context.abrupt(\"break\", 43);\n            case 40:\n              _this.errorMessage = '服务器错误，请稍后重试';\n              return _context.abrupt(\"break\", 43);\n            case 42:\n              _this.errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || '登录失败，请稍后重试';\n            case 43:\n              return _context.abrupt(\"return\");\n            case 44:\n              // 如果是网络错误或服务器未响应，则尝试备用登录\n              console.log('网络错误或服务器未响应，尝试备用登录');\n            case 45:\n              // 在API调用完全失败或没有有效响应的情况下，执行备用登录\n              console.log('尝试备用登录...');\n              if (!(_this.username.trim().toLowerCase() === 'test' && _this.password.trim() === '123456')) {\n                _context.next = 54;\n                break;\n              }\n              console.log('备用登录成功');\n              localStorage.setItem('token', 'mock-token-12345');\n              localStorage.setItem('username', _this.username.trim());\n              _redirect = _this.$route.query.redirect || '/';\n              _context.next = 53;\n              return _this.$router.push(_redirect);\n            case 53:\n              return _context.abrupt(\"return\");\n            case 54:\n              _this.errorMessage = '无法连接到服务器，请检查网络连接';\n              _context.next = 61;\n              break;\n            case 57:\n              _context.prev = 57;\n              _context.t2 = _context[\"catch\"](7);\n              console.error('登录过程中发生意外错误:', _context.t2);\n              _this.errorMessage = '登录过程中发生错误，请稍后重试';\n            case 61:\n              _context.prev = 61;\n              _this.isLoading = false;\n              return _context.finish(61);\n            case 64:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[7, 57, 61, 64], [10, 27]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URLS","axiosConfig","api","create","data","username","password","captcha","displayCaptcha","errorMessage","isLoading","showPassword","computed","isFormValid","trim","length","created","localStorage","getItem","redirect","$route","query","$router","push","generateCaptcha","methods","clearError","togglePassword","randomNum","Math","floor","random","toString","refreshCaptcha","handleSubmit","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","loginData","response","status","errorData","_redirect","wrap","_callee$","_context","prev","next","abrupt","console","log","url","concat","baseURL","login","post","sent","token","setItem","message","t0","error","t1","toLowerCase","t2","finish","stop"],"sources":["D:\\EcoPaw\\carbonfootprint\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-form\">\r\n    <h2>登录</h2>\r\n    <form @submit.prevent=\"handleSubmit\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">账号:</label>\r\n        <input \r\n          type=\"text\" \r\n          id=\"username\" \r\n          v-model.trim=\"username\" \r\n          required \r\n          :disabled=\"isLoading\"\r\n          @input=\"clearError\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">密码:</label>\r\n        <div class=\"password-input\">\r\n          <input \r\n            :type=\"showPassword ? 'text' : 'password'\" \r\n            id=\"password\" \r\n            v-model=\"password\" \r\n            required \r\n            :disabled=\"isLoading\"\r\n            @input=\"clearError\"\r\n          />\r\n          <i \r\n            class=\"fas\" \r\n            :class=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"\r\n            @click=\"togglePassword\"\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"captcha\">验证码:</label>\r\n        <div class=\"captcha-group\">\r\n          <div class=\"captcha-input\">\r\n            <input \r\n              type=\"text\" \r\n              id=\"captcha\" \r\n              v-model.trim=\"captcha\" \r\n              required \r\n              :disabled=\"isLoading\"\r\n              @input=\"clearError\"\r\n              maxlength=\"4\"\r\n              placeholder=\"请输入验证码\"\r\n            />\r\n          </div>\r\n          <div class=\"captcha-code\" @click=\"refreshCaptcha\">\r\n            {{ displayCaptcha }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" :disabled=\"isLoading || !isFormValid\">\r\n        <span v-if=\"isLoading\">\r\n          <i class=\"fas fa-spinner fa-spin\"></i> 登录中...\r\n        </span>\r\n        <span v-else>登录</span>\r\n      </button>\r\n      <div v-if=\"errorMessage\" class=\"error-container\">\r\n        <i class=\"fas fa-exclamation-circle\"></i>\r\n        {{ errorMessage }}\r\n      </div>\r\n      <div class=\"register-link\">\r\n        没有账号? <router-link to=\"/register\">立即注册</router-link>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { API_URLS, axiosConfig } from '../config/api';\r\n\r\nconst api = axios.create(axiosConfig);\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      captcha: '',\r\n      displayCaptcha: '0000', // 显示的验证码，初始值仅作占位\r\n      errorMessage: '',\r\n      isLoading: false,\r\n      showPassword: false\r\n    };\r\n  },\r\n  computed: {\r\n    isFormValid() {\r\n      return this.username.trim() && \r\n             this.password && \r\n             this.captcha.trim().length === 4;\r\n    }\r\n  },\r\n  created() {\r\n    if (localStorage.getItem('token')) {\r\n      const redirect = this.$route.query.redirect || '/';\r\n      this.$router.push(redirect);\r\n    } else {\r\n      // 初始化生成随机验证码\r\n      this.generateCaptcha();\r\n    }\r\n  },\r\n  methods: {\r\n    clearError() {\r\n      this.errorMessage = '';\r\n    },\r\n    togglePassword() {\r\n      this.showPassword = !this.showPassword;\r\n    },\r\n    // 生成4位随机数字验证码\r\n    generateCaptcha() {\r\n      // 生成四位随机数字\r\n      const randomNum = Math.floor(1000 + Math.random() * 9000);\r\n      this.displayCaptcha = randomNum.toString();\r\n    },\r\n    // 刷新验证码\r\n    refreshCaptcha() {\r\n      this.generateCaptcha();\r\n      this.captcha = ''; // 清空用户输入的验证码\r\n    },\r\n    async handleSubmit() {\r\n      // 验证表单\r\n      if (!this.isFormValid) {\r\n        return;\r\n      }\r\n      \r\n      // 验证验证码\r\n      if (this.captcha !== this.displayCaptcha) {\r\n        this.errorMessage = '验证码错误，请重新输入';\r\n        return;\r\n      }\r\n      \r\n      this.isLoading = true;\r\n      this.errorMessage = '';\r\n      \r\n      try {\r\n        const loginData = {\r\n          username: this.username.trim(),\r\n          password: this.password.trim(),\r\n          captcha: this.captcha.trim()\r\n        };\r\n        \r\n        console.log('正在发送登录请求:', {\r\n          url: `${axiosConfig.baseURL}${API_URLS.login}`,\r\n          username: loginData.username\r\n        });\r\n        \r\n        try {\r\n          const response = await api.post(API_URLS.login, loginData);\r\n          \r\n          console.log('服务器响应:', response.data);\r\n          \r\n          if (response.data && response.data.token) {\r\n            // 登录成功\r\n            localStorage.setItem('token', response.data.token);\r\n            localStorage.setItem('username', this.username.trim());\r\n            \r\n            const redirect = this.$route.query.redirect || '/';\r\n            await this.$router.push(redirect);\r\n            return;\r\n          }\r\n          \r\n          // 如果没有token但服务器返回了消息\r\n          if (response.data && response.data.message) {\r\n            this.errorMessage = response.data.message;\r\n            return;\r\n          }\r\n        } catch (apiError) {\r\n          console.error('API调用错误:', apiError);\r\n          \r\n          // 处理API错误响应\r\n          if (apiError.response) {\r\n            const status = apiError.response.status;\r\n            const errorData = apiError.response.data;\r\n            \r\n            switch (status) {\r\n              case 401:\r\n                this.errorMessage = '账号或密码错误';\r\n                break;\r\n              case 403:\r\n                this.errorMessage = '验证码错误';\r\n                break;\r\n              case 500:\r\n                this.errorMessage = '服务器错误，请稍后重试';\r\n                break;\r\n              default:\r\n                this.errorMessage = errorData?.message || '登录失败，请稍后重试';\r\n            }\r\n            \r\n            // 在这里不要尝试备用登录，让错误显示给用户\r\n            return;\r\n          }\r\n          \r\n          // 如果是网络错误或服务器未响应，则尝试备用登录\r\n          console.log('网络错误或服务器未响应，尝试备用登录');\r\n        }\r\n        \r\n        // 在API调用完全失败或没有有效响应的情况下，执行备用登录\r\n        console.log('尝试备用登录...');\r\n        if (this.username.trim().toLowerCase() === 'test' && this.password.trim() === '123456') {\r\n          console.log('备用登录成功');\r\n          localStorage.setItem('token', 'mock-token-12345');\r\n          localStorage.setItem('username', this.username.trim());\r\n          \r\n          const redirect = this.$route.query.redirect || '/';\r\n          await this.$router.push(redirect);\r\n          return;\r\n        }\r\n        \r\n        this.errorMessage = '无法连接到服务器，请检查网络连接';\r\n        \r\n      } catch (error) {\r\n        console.error('登录过程中发生意外错误:', error);\r\n        this.errorMessage = '登录过程中发生错误，请稍后重试';\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-form {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  margin: 2rem auto;\r\n  padding: 2.5rem;\r\n  border-radius: 12px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\r\n  backdrop-filter: blur(8px);\r\n  -webkit-backdrop-filter: blur(8px);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.login-form:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.login-form h2 {\r\n  text-align: center;\r\n  color: #2c3e50;\r\n  margin-bottom: 2rem;\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n  position: relative;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.login-form h2::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 60px;\r\n  height: 3px;\r\n  background: linear-gradient(90deg, #4CA1AF, #2C3E50);\r\n  border-radius: 3px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 500;\r\n  color: #455a64;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.form-group input {\r\n  width: 100%;\r\n  padding: 0.85rem;\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  transition: all 0.3s ease;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n.form-group input:focus {\r\n  outline: none;\r\n  border-color: #4CA1AF;\r\n  box-shadow: 0 0 0 3px rgba(76, 161, 175, 0.2);\r\n  background-color: #fff;\r\n}\r\n\r\n.form-group input:disabled {\r\n  background-color: #f5f5f5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.password-input {\r\n  position: relative;\r\n}\r\n\r\n.password-input i {\r\n  position: absolute;\r\n  right: 12px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  cursor: pointer;\r\n  color: #78909c;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.password-input i:hover {\r\n  color: #455a64;\r\n}\r\n\r\n.captcha-group {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.captcha-input {\r\n  flex: 1;\r\n}\r\n\r\n.captcha-code {\r\n  padding: 0.75rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n  font-weight: bold;\r\n  letter-spacing: 2px;\r\n  min-width: 80px;\r\n  text-align: center;\r\n  border: 2px solid #e0e0e0;\r\n  color: #2c3e50;\r\n  user-select: none;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n}\r\n\r\n.captcha-code:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.captcha-code:hover::after {\r\n  content: '点击刷新';\r\n  position: absolute;\r\n  bottom: -25px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  font-size: 0.7rem;\r\n  color: #78909c;\r\n  white-space: nowrap;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 0.85rem;\r\n  background: linear-gradient(90deg, #4CA1AF, #2C3E50);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-top: 1rem;\r\n  letter-spacing: 0.5px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nbutton:hover:not(:disabled) {\r\n  background: linear-gradient(90deg, #3c8997, #1a2c3f);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\nbutton:disabled {\r\n  background: #cccccc;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.error-container {\r\n  margin-top: 1rem;\r\n  padding: 0.75rem;\r\n  background-color: rgba(255, 76, 76, 0.1);\r\n  border-left: 3px solid #ff4c4c;\r\n  color: #d32f2f;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.error-container i {\r\n  margin-right: 8px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.register-link {\r\n  text-align: center;\r\n  margin-top: 1.5rem;\r\n  color: #455a64;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.register-link a {\r\n  color: #4CA1AF;\r\n  text-decoration: none;\r\n  font-weight: 600;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.register-link a:hover {\r\n  color: #2C3E50;\r\n  text-decoration: underline;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.fa-spinner {\r\n  animation: spin 1s linear infinite;\r\n  margin-right: 8px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}