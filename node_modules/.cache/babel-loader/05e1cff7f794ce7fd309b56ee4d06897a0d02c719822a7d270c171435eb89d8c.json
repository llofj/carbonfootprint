{"ast":null,"code":"import _regeneratorRuntime from \"D:/EcoPaw/carbonfootprint/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/EcoPaw/carbonfootprint/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\n\n// 固定验证码常量 - 与后端匹配\nvar FIXED_CAPTCHA = \"0000\";\nvar api = axios.create(axiosConfig);\nexport default {\n  data: function data() {\n    return {\n      username: '',\n      password: '',\n      captchaInput: '',\n      captchaDisplay: FIXED_CAPTCHA,\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      refreshCount: 0\n    };\n  },\n  computed: {\n    isFormValid: function isFormValid() {\n      return this.username.trim() && this.password && this.captchaInput && this.captchaInput.length === 4;\n    }\n  },\n  created: function created() {\n    if (localStorage.getItem('token')) {\n      var redirect = this.$route.query.redirect || '/';\n      this.$router.push(redirect);\n    }\n  },\n  methods: {\n    clearError: function clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword: function togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    // 模拟刷新验证码效果，但实际值仍为0000\n    simulateRefreshCaptcha: function simulateRefreshCaptcha() {\n      this.refreshCount++;\n      this.captchaInput = '';\n\n      // 添加刷新动画\n      var captchaElement = document.querySelector('.captcha-code');\n      if (captchaElement) {\n        captchaElement.classList.add('refreshing');\n        setTimeout(function () {\n          captchaElement.classList.remove('refreshing');\n        }, 500);\n      }\n      console.log('刷新验证码 (模拟)');\n    },\n    // 为每个数字生成随机样式，增加视觉干扰\n    getRandomStyle: function getRandomStyle() {\n      var rotation = Math.floor(Math.random() * 10) - 5;\n      var fontSize = 14 + Math.floor(Math.random() * 4);\n      var letterSpacing = Math.floor(Math.random() * 3) - 1;\n      return {\n        transform: \"rotate(\".concat(rotation, \"deg)\"),\n        fontSize: \"\".concat(fontSize, \"px\"),\n        letterSpacing: \"\".concat(letterSpacing, \"px\"),\n        display: 'inline-block',\n        fontWeight: 'bold',\n        margin: '0 2px'\n      };\n    },\n    handleSubmit: function handleSubmit() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var loginData, response, redirect, status, errorData, _redirect;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.isFormValid) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              if (!(_this.captchaInput !== FIXED_CAPTCHA)) {\n                _context.next = 7;\n                break;\n              }\n              console.log(\"\\u9A8C\\u8BC1\\u7801\\u6BD4\\u5BF9: \\u7528\\u6237\\u8F93\\u5165=\\\"\".concat(_this.captchaInput, \"\\\"\\uFF0C\\u6B63\\u786E\\u503C=\\\"\").concat(FIXED_CAPTCHA, \"\\\"\\uFF0C\\u4E0D\\u5339\\u914D\"));\n              _this.errorMessage = '验证码错误，请重新输入';\n              _this.captchaInput = '';\n              return _context.abrupt(\"return\");\n            case 7:\n              console.log(\"验证码校验通过，准备提交登录请求\");\n              _this.isLoading = true;\n              _this.errorMessage = '';\n              _context.prev = 10;\n              loginData = {\n                username: _this.username.trim(),\n                password: _this.password,\n                captcha: _this.captchaInput\n              };\n              console.log('正在发送登录请求:', {\n                url: \"\".concat(axiosConfig.baseURL).concat(API_URLS.login),\n                username: loginData.username\n              });\n              _context.prev = 13;\n              _context.next = 16;\n              return api.post(API_URLS.login, loginData);\n            case 16:\n              response = _context.sent;\n              console.log('服务器响应:', response.data);\n              if (!(response.data && response.data.token)) {\n                _context.next = 25;\n                break;\n              }\n              // 登录成功\n              localStorage.setItem('token', response.data.token);\n              localStorage.setItem('username', _this.username.trim());\n              redirect = _this.$route.query.redirect || '/';\n              _context.next = 24;\n              return _this.$router.push(redirect);\n            case 24:\n              return _context.abrupt(\"return\");\n            case 25:\n              if (!(response.data && response.data.message)) {\n                _context.next = 29;\n                break;\n              }\n              _this.errorMessage = response.data.message;\n              _this.simulateRefreshCaptcha();\n              return _context.abrupt(\"return\");\n            case 29:\n              _context.next = 50;\n              break;\n            case 31:\n              _context.prev = 31;\n              _context.t0 = _context[\"catch\"](13);\n              console.error('API调用错误:', _context.t0);\n\n              // 处理API错误响应\n              if (!_context.t0.response) {\n                _context.next = 49;\n                break;\n              }\n              status = _context.t0.response.status;\n              errorData = _context.t0.response.data;\n              _context.t1 = status;\n              _context.next = _context.t1 === 401 ? 40 : _context.t1 === 403 ? 42 : _context.t1 === 500 ? 44 : 46;\n              break;\n            case 40:\n              _this.errorMessage = '账号或密码错误';\n              return _context.abrupt(\"break\", 47);\n            case 42:\n              _this.errorMessage = '验证码错误';\n              return _context.abrupt(\"break\", 47);\n            case 44:\n              _this.errorMessage = '服务器错误，请稍后重试';\n              return _context.abrupt(\"break\", 47);\n            case 46:\n              _this.errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || '登录失败，请稍后重试';\n            case 47:\n              _this.simulateRefreshCaptcha();\n              return _context.abrupt(\"return\");\n            case 49:\n              // 如果是网络错误或服务器未响应，则尝试备用登录\n              console.log('网络错误或服务器未响应，尝试备用登录');\n            case 50:\n              // 在API调用完全失败或没有有效响应的情况下，执行备用登录\n              console.log('尝试备用登录...');\n              if (!(_this.username.trim().toLowerCase() === 'test' && _this.password === '123456')) {\n                _context.next = 59;\n                break;\n              }\n              console.log('备用登录成功');\n              localStorage.setItem('token', 'mock-token-12345');\n              localStorage.setItem('username', _this.username.trim());\n              _redirect = _this.$route.query.redirect || '/';\n              _context.next = 58;\n              return _this.$router.push(_redirect);\n            case 58:\n              return _context.abrupt(\"return\");\n            case 59:\n              _this.errorMessage = '无法连接到服务器，请检查网络连接';\n              _this.simulateRefreshCaptcha();\n              _context.next = 68;\n              break;\n            case 63:\n              _context.prev = 63;\n              _context.t2 = _context[\"catch\"](10);\n              console.error('登录过程中发生意外错误:', _context.t2);\n              _this.errorMessage = '登录过程中发生错误，请稍后重试';\n              _this.simulateRefreshCaptcha();\n            case 68:\n              _context.prev = 68;\n              _this.isLoading = false;\n              return _context.finish(68);\n            case 71:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[10, 63, 68, 71], [13, 31]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URLS","axiosConfig","FIXED_CAPTCHA","api","create","data","username","password","captchaInput","captchaDisplay","errorMessage","isLoading","showPassword","refreshCount","computed","isFormValid","trim","length","created","localStorage","getItem","redirect","$route","query","$router","push","methods","clearError","togglePassword","simulateRefreshCaptcha","captchaElement","document","querySelector","classList","add","setTimeout","remove","console","log","getRandomStyle","rotation","Math","floor","random","fontSize","letterSpacing","transform","concat","display","fontWeight","margin","handleSubmit","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","loginData","response","status","errorData","_redirect","wrap","_callee$","_context","prev","next","abrupt","captcha","url","baseURL","login","post","sent","token","setItem","message","t0","error","t1","toLowerCase","t2","finish","stop"],"sources":["D:\\EcoPaw\\carbonfootprint\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-form\">\r\n    <h2>登录</h2>\r\n    <form @submit.prevent=\"handleSubmit\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">账号:</label>\r\n        <input \r\n          type=\"text\" \r\n          id=\"username\" \r\n          v-model=\"username\" \r\n          required \r\n          :disabled=\"isLoading\"\r\n          @input=\"clearError\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">密码:</label>\r\n        <div class=\"password-input\">\r\n          <input \r\n            :type=\"showPassword ? 'text' : 'password'\" \r\n            id=\"password\" \r\n            v-model=\"password\" \r\n            required \r\n            :disabled=\"isLoading\"\r\n            @input=\"clearError\"\r\n          />\r\n          <i \r\n            class=\"fas\" \r\n            :class=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"\r\n            @click=\"togglePassword\"\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"captcha\">验证码:</label>\r\n        <div class=\"captcha-group\">\r\n          <div class=\"captcha-input\">\r\n            <input \r\n              type=\"text\" \r\n              id=\"captcha\" \r\n              v-model=\"captchaInput\" \r\n              required \r\n              :disabled=\"isLoading\"\r\n              @input=\"clearError\"\r\n              placeholder=\"请输入验证码\"\r\n              maxlength=\"4\"\r\n              pattern=\"[0-9]{4}\"\r\n            />\r\n          </div>\r\n          <div \r\n            class=\"captcha-code\" \r\n            @click=\"simulateRefreshCaptcha\" \r\n            title=\"当前验证码为0000\"\r\n          >\r\n            <span\r\n              v-for=\"(digit, index) in captchaDisplay\"\r\n              :key=\"index\"\r\n              :style=\"getRandomStyle()\"\r\n            >{{ digit }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" :disabled=\"isLoading || !isFormValid\">\r\n        <span v-if=\"isLoading\">\r\n          <i class=\"fas fa-spinner fa-spin\"></i> 登录中...\r\n        </span>\r\n        <span v-else>登录</span>\r\n      </button>\r\n      <div v-if=\"errorMessage\" class=\"error-container\">\r\n        <i class=\"fas fa-exclamation-circle\"></i>\r\n        {{ errorMessage }}\r\n      </div>\r\n      <div class=\"register-link\">\r\n        没有账号? <router-link to=\"/register\">立即注册</router-link>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { API_URLS, axiosConfig } from '../config/api';\r\n\r\n// 固定验证码常量 - 与后端匹配\r\nconst FIXED_CAPTCHA = \"0000\";\r\n\r\nconst api = axios.create(axiosConfig);\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      captchaInput: '',\r\n      captchaDisplay: FIXED_CAPTCHA,\r\n      errorMessage: '',\r\n      isLoading: false,\r\n      showPassword: false,\r\n      refreshCount: 0\r\n    };\r\n  },\r\n  computed: {\r\n    isFormValid() {\r\n      return this.username.trim() && \r\n             this.password && \r\n             this.captchaInput && \r\n             this.captchaInput.length === 4;\r\n    }\r\n  },\r\n  created() {\r\n    if (localStorage.getItem('token')) {\r\n      const redirect = this.$route.query.redirect || '/';\r\n      this.$router.push(redirect);\r\n    }\r\n  },\r\n  methods: {\r\n    clearError() {\r\n      this.errorMessage = '';\r\n    },\r\n    togglePassword() {\r\n      this.showPassword = !this.showPassword;\r\n    },\r\n    // 模拟刷新验证码效果，但实际值仍为0000\r\n    simulateRefreshCaptcha() {\r\n      this.refreshCount++;\r\n      this.captchaInput = '';\r\n      \r\n      // 添加刷新动画\r\n      const captchaElement = document.querySelector('.captcha-code');\r\n      if (captchaElement) {\r\n        captchaElement.classList.add('refreshing');\r\n        setTimeout(() => {\r\n          captchaElement.classList.remove('refreshing');\r\n        }, 500);\r\n      }\r\n      \r\n      console.log('刷新验证码 (模拟)');\r\n    },\r\n    // 为每个数字生成随机样式，增加视觉干扰\r\n    getRandomStyle() {\r\n      const rotation = Math.floor(Math.random() * 10) - 5;\r\n      const fontSize = 14 + Math.floor(Math.random() * 4);\r\n      const letterSpacing = Math.floor(Math.random() * 3) - 1;\r\n      \r\n      return {\r\n        transform: `rotate(${rotation}deg)`,\r\n        fontSize: `${fontSize}px`,\r\n        letterSpacing: `${letterSpacing}px`,\r\n        display: 'inline-block',\r\n        fontWeight: 'bold',\r\n        margin: '0 2px'\r\n      };\r\n    },\r\n    async handleSubmit() {\r\n      // 验证表单\r\n      if (!this.isFormValid) {\r\n        return;\r\n      }\r\n      \r\n      // 检查验证码 - 固定值\"0000\"\r\n      if (this.captchaInput !== FIXED_CAPTCHA) {\r\n        console.log(`验证码比对: 用户输入=\"${this.captchaInput}\"，正确值=\"${FIXED_CAPTCHA}\"，不匹配`);\r\n        this.errorMessage = '验证码错误，请重新输入';\r\n        this.captchaInput = '';\r\n        return;\r\n      }\r\n      \r\n      console.log(\"验证码校验通过，准备提交登录请求\");\r\n      \r\n      this.isLoading = true;\r\n      this.errorMessage = '';\r\n      \r\n      try {\r\n        const loginData = {\r\n          username: this.username.trim(),\r\n          password: this.password,\r\n          captcha: this.captchaInput\r\n        };\r\n        \r\n        console.log('正在发送登录请求:', {\r\n          url: `${axiosConfig.baseURL}${API_URLS.login}`,\r\n          username: loginData.username\r\n        });\r\n        \r\n        try {\r\n          const response = await api.post(API_URLS.login, loginData);\r\n          \r\n          console.log('服务器响应:', response.data);\r\n          \r\n          if (response.data && response.data.token) {\r\n            // 登录成功\r\n            localStorage.setItem('token', response.data.token);\r\n            localStorage.setItem('username', this.username.trim());\r\n            \r\n            const redirect = this.$route.query.redirect || '/';\r\n            await this.$router.push(redirect);\r\n            return;\r\n          }\r\n          \r\n          // 如果没有token但服务器返回了消息\r\n          if (response.data && response.data.message) {\r\n            this.errorMessage = response.data.message;\r\n            this.simulateRefreshCaptcha();\r\n            return;\r\n          }\r\n        } catch (apiError) {\r\n          console.error('API调用错误:', apiError);\r\n          \r\n          // 处理API错误响应\r\n          if (apiError.response) {\r\n            const status = apiError.response.status;\r\n            const errorData = apiError.response.data;\r\n            \r\n            switch (status) {\r\n              case 401:\r\n                this.errorMessage = '账号或密码错误';\r\n                break;\r\n              case 403:\r\n                this.errorMessage = '验证码错误';\r\n                break;\r\n              case 500:\r\n                this.errorMessage = '服务器错误，请稍后重试';\r\n                break;\r\n              default:\r\n                this.errorMessage = errorData?.message || '登录失败，请稍后重试';\r\n            }\r\n            \r\n            this.simulateRefreshCaptcha();\r\n            return;\r\n          }\r\n          \r\n          // 如果是网络错误或服务器未响应，则尝试备用登录\r\n          console.log('网络错误或服务器未响应，尝试备用登录');\r\n        }\r\n        \r\n        // 在API调用完全失败或没有有效响应的情况下，执行备用登录\r\n        console.log('尝试备用登录...');\r\n        if (this.username.trim().toLowerCase() === 'test' && this.password === '123456') {\r\n          console.log('备用登录成功');\r\n          localStorage.setItem('token', 'mock-token-12345');\r\n          localStorage.setItem('username', this.username.trim());\r\n          \r\n          const redirect = this.$route.query.redirect || '/';\r\n          await this.$router.push(redirect);\r\n          return;\r\n        }\r\n        \r\n        this.errorMessage = '无法连接到服务器，请检查网络连接';\r\n        this.simulateRefreshCaptcha();\r\n        \r\n      } catch (error) {\r\n        console.error('登录过程中发生意外错误:', error);\r\n        this.errorMessage = '登录过程中发生错误，请稍后重试';\r\n        this.simulateRefreshCaptcha();\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-form {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  margin: 2rem auto;\r\n  padding: 2.5rem;\r\n  border-radius: 12px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\r\n  backdrop-filter: blur(8px);\r\n  -webkit-backdrop-filter: blur(8px);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.login-form:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.login-form h2 {\r\n  text-align: center;\r\n  color: #2c3e50;\r\n  margin-bottom: 2rem;\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n  position: relative;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.login-form h2::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 60px;\r\n  height: 3px;\r\n  background: linear-gradient(90deg, #4CA1AF, #2C3E50);\r\n  border-radius: 3px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 500;\r\n  color: #455a64;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.form-group input {\r\n  width: 100%;\r\n  padding: 0.85rem;\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  transition: all 0.3s ease;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n.form-group input:focus {\r\n  outline: none;\r\n  border-color: #4CA1AF;\r\n  box-shadow: 0 0 0 3px rgba(76, 161, 175, 0.2);\r\n  background-color: #fff;\r\n}\r\n\r\n.form-group input:disabled {\r\n  background-color: #f5f5f5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.password-input {\r\n  position: relative;\r\n}\r\n\r\n.password-input i {\r\n  position: absolute;\r\n  right: 12px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  cursor: pointer;\r\n  color: #78909c;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.password-input i:hover {\r\n  color: #455a64;\r\n}\r\n\r\n.captcha-group {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.captcha-input {\r\n  flex: 1;\r\n}\r\n\r\n.captcha-code {\r\n  padding: 0.75rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n  font-weight: bold;\r\n  letter-spacing: 2px;\r\n  min-width: 80px;\r\n  text-align: center;\r\n  border: 2px solid #e0e0e0;\r\n  color: #2c3e50;\r\n  user-select: none;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: linear-gradient(45deg, #f5f5f5 25%, #e8e8e8 25%, #e8e8e8 50%, #f5f5f5 50%, #f5f5f5 75%, #e8e8e8 75%, #e8e8e8);\r\n  background-size: 8px 8px;\r\n}\r\n\r\n.captcha-code:hover {\r\n  background-color: #e0e0e0;\r\n  transform: scale(1.02);\r\n}\r\n\r\n.captcha-code::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 2px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n  top: 50%;\r\n  left: 0;\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.captcha-code::after {\r\n  content: '点击刷新';\r\n  position: absolute;\r\n  bottom: -25px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  font-size: 0.7rem;\r\n  color: #78909c;\r\n  white-space: nowrap;\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease;\r\n}\r\n\r\n.captcha-code:hover::after {\r\n  opacity: 1;\r\n}\r\n\r\n.refreshing {\r\n  animation: refresh-animation 0.5s;\r\n}\r\n\r\n@keyframes refresh-animation {\r\n  0% { transform: rotate(0); opacity: 1; }\r\n  50% { transform: rotate(10deg); opacity: 0.5; }\r\n  100% { transform: rotate(0); opacity: 1; }\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 0.85rem;\r\n  background: linear-gradient(90deg, #4CA1AF, #2C3E50);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-top: 1rem;\r\n  letter-spacing: 0.5px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nbutton:hover:not(:disabled) {\r\n  background: linear-gradient(90deg, #3c8997, #1a2c3f);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\nbutton:disabled {\r\n  background: #cccccc;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.error-container {\r\n  margin-top: 1rem;\r\n  padding: 0.75rem;\r\n  background-color: rgba(255, 76, 76, 0.1);\r\n  border-left: 3px solid #ff4c4c;\r\n  color: #d32f2f;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.error-container i {\r\n  margin-right: 8px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.register-link {\r\n  text-align: center;\r\n  margin-top: 1.5rem;\r\n  color: #455a64;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.register-link a {\r\n  color: #4CA1AF;\r\n  text-decoration: none;\r\n  font-weight: 600;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.register-link a:hover {\r\n  color: #2C3E50;\r\n  text-decoration: underline;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.fa-spinner {\r\n  animation: spin 1s linear infinite;\r\n  margin-right: 8px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}