{"ast":null,"code":"import _objectSpread from \"D:/EcoPaw/carbonfootprint - \\u526F\\u672C/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// src/config/api.js\nimport axios from 'axios';\n\n// API 基础配置\nvar isDevelopment = process.env.NODE_ENV === 'development';\n\n// 获取当前主机地址，用于动态设置API服务器地址\nvar getApiBaseUrl = function getApiBaseUrl() {\n  // 获取当前主机名\n  var currentHost = window.location.hostname;\n  var currentProtocol = window.location.protocol;\n  if (isDevelopment) {\n    if (currentHost === 'localhost' || currentHost === '127.0.0.1') {\n      return 'http://localhost:5000/api';\n    } else {\n      // 如果是通过IP地址访问的，使用相同IP地址的后端API\n      return \"http://\".concat(currentHost, \":5000/api\");\n    }\n  }\n\n  // 生产环境尝试使用同源API\n  return \"\".concat(currentProtocol, \"//\").concat(currentHost, \":5000/api\");\n};\n\n// 设置基础URL\nvar baseURL = getApiBaseUrl();\nconsole.log('API基础URL:', baseURL);\n\n// API 端点\nexport var API_URLS = {\n  login: '/auth/login',\n  logout: '/auth/logout',\n  register: '/auth/register',\n  captcha: '/auth/captcha',\n  profile: '/user/profile',\n  calculator: '/carbon/calculate',\n  pet: '/pet',\n  achievements: '/achievement',\n  ranking: '/leaderboard'\n};\n\n// axios 配置\nexport var axiosConfig = {\n  baseURL: baseURL,\n  timeout: 15000,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json, image/svg+xml'\n  }\n};\n\n// 请求拦截器配置\nexport var requestInterceptor = function requestInterceptor(config) {\n  console.log('请求拦截器处理请求:', config.url);\n\n  // 如果是获取验证码的请求，修改 headers\n  if (config.url === API_URLS.captcha) {\n    config.headers['Accept'] = 'image/svg+xml';\n    config.responseType = 'text';\n    return config;\n  }\n  var token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n\n  // 添加调试log\n  if (config.data) {\n    try {\n      // 清理敏感信息后的日志\n      var logData = _objectSpread({}, config.data);\n      if (logData.password) {\n        logData.password = '******';\n      }\n      console.log('请求数据:', logData);\n    } catch (e) {\n      console.error('请求日志记录失败:', e);\n    }\n  }\n  return config;\n};\n\n// 响应拦截器配置\nexport var responseInterceptor = {\n  success: function success(response) {\n    console.log('响应拦截器接收到响应:', {\n      url: response.config.url,\n      status: response.status,\n      statusText: response.statusText\n    });\n    return response;\n  },\n  error: function error(_error) {\n    console.error('API Error:', _error);\n\n    // 如果有响应\n    if (_error.response) {\n      console.log('错误响应信息:', {\n        status: _error.response.status,\n        statusText: _error.response.statusText,\n        data: _error.response.data\n      });\n\n      // 处理401错误（未授权）\n      if (_error.response.status === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        if (window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n      }\n    } else if (_error.request) {\n      // 请求已发送但没有收到响应\n      console.log('没有收到响应:', _error.request);\n    } else {\n      // 设置请求时发生错误\n      console.log('请求设置错误:', _error.message);\n    }\n    return Promise.reject(_error);\n  }\n};\n\n// 创建并配置axios实例的函数\nexport var getAPI = function getAPI() {\n  var instance = axios.create(axiosConfig);\n\n  // 添加请求拦截器\n  instance.interceptors.request.use(requestInterceptor, function (error) {\n    return Promise.reject(error);\n  });\n\n  // 添加响应拦截器\n  instance.interceptors.response.use(responseInterceptor.success, responseInterceptor.error);\n  return instance;\n};","map":{"version":3,"names":["axios","isDevelopment","process","env","NODE_ENV","getApiBaseUrl","currentHost","window","location","hostname","currentProtocol","protocol","concat","baseURL","console","log","API_URLS","login","logout","register","captcha","profile","calculator","pet","achievements","ranking","axiosConfig","timeout","withCredentials","headers","requestInterceptor","config","url","responseType","token","localStorage","getItem","Authorization","data","logData","_objectSpread","password","e","error","responseInterceptor","success","response","status","statusText","removeItem","pathname","href","request","message","Promise","reject","getAPI","instance","create","interceptors","use"],"sources":["D:/EcoPaw/carbonfootprint - 副本/src/config/api.js"],"sourcesContent":["// src/config/api.js\r\nimport axios from 'axios';\r\n\r\n// API 基础配置\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\n// 获取当前主机地址，用于动态设置API服务器地址\r\nconst getApiBaseUrl = () => {\r\n  // 获取当前主机名\r\n  const currentHost = window.location.hostname;\r\n  const currentProtocol = window.location.protocol;\r\n  \r\n  if (isDevelopment) {\r\n    if (currentHost === 'localhost' || currentHost === '127.0.0.1') {\r\n      return 'http://localhost:5000/api';\r\n    } else {\r\n      // 如果是通过IP地址访问的，使用相同IP地址的后端API\r\n      return `http://${currentHost}:5000/api`;\r\n    }\r\n  }\r\n  \r\n  // 生产环境尝试使用同源API\r\n  return `${currentProtocol}//${currentHost}:5000/api`;\r\n};\r\n\r\n// 设置基础URL\r\nconst baseURL = getApiBaseUrl();\r\nconsole.log('API基础URL:', baseURL);\r\n\r\n// API 端点\r\nexport const API_URLS = {\r\n  login: '/auth/login',\r\n  logout: '/auth/logout',\r\n  register: '/auth/register',\r\n  captcha: '/auth/captcha',\r\n  profile: '/user/profile',\r\n  calculator: '/carbon/calculate',\r\n  pet: '/pet',\r\n  achievements: '/achievement',\r\n  ranking: '/leaderboard'\r\n};\r\n\r\n// axios 配置\r\nexport const axiosConfig = {\r\n  baseURL,\r\n  timeout: 15000,\r\n  withCredentials: true,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json, image/svg+xml'\r\n  }\r\n};\r\n\r\n// 请求拦截器配置\r\nexport const requestInterceptor = (config) => {\r\n  console.log('请求拦截器处理请求:', config.url);\r\n  \r\n  // 如果是获取验证码的请求，修改 headers\r\n  if (config.url === API_URLS.captcha) {\r\n    config.headers['Accept'] = 'image/svg+xml';\r\n    config.responseType = 'text';\r\n    return config;\r\n  }\r\n  \r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  \r\n  // 添加调试log\r\n  if (config.data) {\r\n    try {\r\n      // 清理敏感信息后的日志\r\n      const logData = { ...config.data };\r\n      if (logData.password) {\r\n        logData.password = '******';\r\n      }\r\n      console.log('请求数据:', logData);\r\n    } catch (e) {\r\n      console.error('请求日志记录失败:', e);\r\n    }\r\n  }\r\n  \r\n  return config;\r\n};\r\n\r\n// 响应拦截器配置\r\nexport const responseInterceptor = {\r\n  success: (response) => {\r\n    console.log('响应拦截器接收到响应:', {\r\n      url: response.config.url,\r\n      status: response.status,\r\n      statusText: response.statusText\r\n    });\r\n    return response;\r\n  },\r\n  error: (error) => {\r\n    console.error('API Error:', error);\r\n    \r\n    // 如果有响应\r\n    if (error.response) {\r\n      console.log('错误响应信息:', {\r\n        status: error.response.status,\r\n        statusText: error.response.statusText,\r\n        data: error.response.data\r\n      });\r\n      \r\n      // 处理401错误（未授权）\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('username');\r\n        if (window.location.pathname !== '/login') {\r\n          window.location.href = '/login';\r\n        }\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发送但没有收到响应\r\n      console.log('没有收到响应:', error.request);\r\n    } else {\r\n      // 设置请求时发生错误\r\n      console.log('请求设置错误:', error.message);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n}; \r\n\r\n// 创建并配置axios实例的函数\r\nexport const getAPI = () => {\r\n  const instance = axios.create(axiosConfig);\r\n  \r\n  // 添加请求拦截器\r\n  instance.interceptors.request.use(\r\n    requestInterceptor,\r\n    error => Promise.reject(error)\r\n  );\r\n  \r\n  // 添加响应拦截器\r\n  instance.interceptors.response.use(\r\n    responseInterceptor.success,\r\n    responseInterceptor.error\r\n  );\r\n  \r\n  return instance;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}