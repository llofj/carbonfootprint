{"ast":null,"code":"import _regeneratorRuntime from \"D:/EcoPaw/carbonfootprint/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/EcoPaw/carbonfootprint/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\nvar api = axios.create(axiosConfig);\nexport default {\n  data: function data() {\n    return {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      captchaInput: '',\n      captchaDisplay: '',\n      // 显示的验证码\n      systemCaptcha: '',\n      // 系统生成的验证码，用于比对\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      showConfirmPassword: false,\n      refreshCount: 0\n    };\n  },\n  computed: {\n    isFormValid: function isFormValid() {\n      return this.username.trim() && this.email.trim() && this.password && this.password === this.confirmPassword && this.captchaInput && this.captchaInput.length === 4;\n    }\n  },\n  created: function created() {\n    // 初始化生成随机验证码\n    this.generateCaptcha();\n  },\n  methods: {\n    clearError: function clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword: function togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    toggleConfirmPassword: function toggleConfirmPassword() {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    },\n    // 生成新的随机验证码\n    generateCaptcha: function generateCaptcha() {\n      // 生成四位随机数字 (1000-9999)\n      var randomNum = Math.floor(1000 + Math.random() * 9000);\n      var captchaString = randomNum.toString();\n\n      // 设置显示验证码和系统验证码\n      this.captchaDisplay = captchaString;\n      this.systemCaptcha = captchaString;\n      this.captchaInput = ''; // 清空用户输入\n\n      // 如果已经有输入框状态，添加刷新动画\n      var captchaElement = document.querySelector('.captcha-code');\n      if (captchaElement && this.refreshCount > 0) {\n        captchaElement.classList.add('refreshing');\n        setTimeout(function () {\n          captchaElement.classList.remove('refreshing');\n        }, 500);\n      }\n      this.refreshCount++;\n      console.log(\"\\u751F\\u6210\\u65B0\\u9A8C\\u8BC1\\u7801: \".concat(this.systemCaptcha));\n    },\n    // 为每个数字生成随机样式，增加视觉干扰\n    getRandomStyle: function getRandomStyle() {\n      var rotation = Math.floor(Math.random() * 10) - 5;\n      var fontSize = 14 + Math.floor(Math.random() * 4);\n      var letterSpacing = Math.floor(Math.random() * 3) - 1;\n      return {\n        transform: \"rotate(\".concat(rotation, \"deg)\"),\n        fontSize: \"\".concat(fontSize, \"px\"),\n        letterSpacing: \"\".concat(letterSpacing, \"px\"),\n        display: 'inline-block',\n        fontWeight: 'bold',\n        margin: '0 2px'\n      };\n    },\n    handleSubmit: function handleSubmit() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var registerData, response, status, errorData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.isFormValid) {\n                _context.next = 5;\n                break;\n              }\n              if (!(_this.password !== _this.confirmPassword)) {\n                _context.next = 4;\n                break;\n              }\n              _this.errorMessage = '两次输入的密码不一致';\n              return _context.abrupt(\"return\");\n            case 4:\n              return _context.abrupt(\"return\");\n            case 5:\n              if (!(_this.captchaInput !== _this.systemCaptcha)) {\n                _context.next = 11;\n                break;\n              }\n              console.log(\"\\u9A8C\\u8BC1\\u7801\\u6BD4\\u5BF9\\u5931\\u8D25: \\u7528\\u6237\\u8F93\\u5165=\\\"\".concat(_this.captchaInput, \"\\\", \\u7CFB\\u7EDF\\u9A8C\\u8BC1\\u7801=\\\"\").concat(_this.systemCaptcha, \"\\\"\"));\n              _this.errorMessage = '验证码错误，请重新输入';\n              _this.captchaInput = '';\n              _this.generateCaptcha(); // 生成新验证码\n              return _context.abrupt(\"return\");\n            case 11:\n              console.log(\"验证码校验通过，准备提交注册请求\");\n              _this.isLoading = true;\n              _this.errorMessage = '';\n              _context.prev = 14;\n              registerData = {\n                username: _this.username.trim(),\n                email: _this.email.trim(),\n                password: _this.password,\n                captcha: \"0000\" // 固定发送\"0000\"给后端，保持兼容\n              };\n              console.log('正在发送注册请求:', {\n                用户名: registerData.username,\n                邮箱: registerData.email,\n                验证码: \"固定发送0000\"\n              });\n              _context.next = 19;\n              return api.post(API_URLS.register, registerData);\n            case 19:\n              response = _context.sent;\n              console.log('服务器响应:', response.data);\n              if (!(response.data && response.data.message === '注册成功')) {\n                _context.next = 24;\n                break;\n              }\n              // 注册成功，跳转到登录页\n              _this.$router.push('/login?registered=true');\n              return _context.abrupt(\"return\");\n            case 24:\n              if (!(response.data && response.data.message)) {\n                _context.next = 28;\n                break;\n              }\n              _this.errorMessage = response.data.message;\n              _this.generateCaptcha();\n              return _context.abrupt(\"return\");\n            case 28:\n              _context.next = 51;\n              break;\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](14);\n              console.error('注册过程中发生错误:', _context.t0);\n\n              // 处理API错误响应\n              if (!_context.t0.response) {\n                _context.next = 49;\n                break;\n              }\n              status = _context.t0.response.status;\n              errorData = _context.t0.response.data;\n              _context.t1 = status;\n              _context.next = _context.t1 === 400 ? 39 : _context.t1 === 409 ? 41 : _context.t1 === 500 ? 43 : 45;\n              break;\n            case 39:\n              _this.errorMessage = errorData.message || '注册信息有误，请检查输入';\n              return _context.abrupt(\"break\", 46);\n            case 41:\n              _this.errorMessage = '用户名已存在，请选择其他用户名';\n              return _context.abrupt(\"break\", 46);\n            case 43:\n              _this.errorMessage = '服务器错误，请稍后重试';\n              return _context.abrupt(\"break\", 46);\n            case 45:\n              _this.errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || '注册失败，请稍后重试';\n            case 46:\n              _this.generateCaptcha();\n              _context.next = 51;\n              break;\n            case 49:\n              _this.errorMessage = '无法连接到服务器，请检查网络连接';\n              _this.generateCaptcha();\n            case 51:\n              _context.prev = 51;\n              _this.isLoading = false;\n              return _context.finish(51);\n            case 54:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[14, 30, 51, 54]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URLS","axiosConfig","api","create","data","username","email","password","confirmPassword","captchaInput","captchaDisplay","systemCaptcha","errorMessage","isLoading","showPassword","showConfirmPassword","refreshCount","computed","isFormValid","trim","length","created","generateCaptcha","methods","clearError","togglePassword","toggleConfirmPassword","randomNum","Math","floor","random","captchaString","toString","captchaElement","document","querySelector","classList","add","setTimeout","remove","console","log","concat","getRandomStyle","rotation","fontSize","letterSpacing","transform","display","fontWeight","margin","handleSubmit","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","registerData","response","status","errorData","wrap","_callee$","_context","prev","next","abrupt","captcha","用户名","邮箱","验证码","post","register","sent","message","$router","push","t0","error","t1","finish","stop"],"sources":["D:\\EcoPaw\\carbonfootprint\\src\\components\\RegisterForm.vue"],"sourcesContent":["<template>\n  <div class=\"register-form\">\n    <h2>注册新用户</h2>\n    <form @submit.prevent=\"handleSubmit\">\n      <div class=\"form-group\">\n        <label for=\"username\">用户名:</label>\n        <input \n          type=\"text\" \n          id=\"username\" \n          v-model.trim=\"username\" \n          required \n          :disabled=\"isLoading\"\n          @input=\"clearError\"\n          placeholder=\"请输入用户名\"\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"email\">邮箱:</label>\n        <input \n          type=\"email\" \n          id=\"email\" \n          v-model.trim=\"email\" \n          required \n          :disabled=\"isLoading\"\n          @input=\"clearError\"\n          placeholder=\"请输入邮箱\"\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">密码:</label>\n        <div class=\"password-input\">\n          <input \n            :type=\"showPassword ? 'text' : 'password'\" \n            id=\"password\" \n            v-model=\"password\" \n            required \n            :disabled=\"isLoading\"\n            @input=\"clearError\"\n            placeholder=\"请输入密码\"\n          />\n          <i \n            class=\"fas\" \n            :class=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"\n            @click=\"togglePassword\"\n          ></i>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"confirmPassword\">确认密码:</label>\n        <div class=\"password-input\">\n          <input \n            :type=\"showConfirmPassword ? 'text' : 'password'\" \n            id=\"confirmPassword\" \n            v-model=\"confirmPassword\" \n            required \n            :disabled=\"isLoading\"\n            @input=\"clearError\"\n            placeholder=\"请再次输入密码\"\n          />\n          <i \n            class=\"fas\" \n            :class=\"showConfirmPassword ? 'fa-eye-slash' : 'fa-eye'\"\n            @click=\"toggleConfirmPassword\"\n          ></i>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"captcha\">验证码:</label>\n        <div class=\"captcha-group\">\n          <div class=\"captcha-input\">\n            <input \n              type=\"text\" \n              id=\"captcha\" \n              v-model=\"captchaInput\" \n              required \n              :disabled=\"isLoading\"\n              @input=\"clearError\"\n              maxlength=\"4\"\n              pattern=\"[0-9]{4}\"\n              placeholder=\"请输入验证码\"\n            />\n          </div>\n          <div \n            class=\"captcha-code\" \n            @click=\"generateCaptcha\" \n            title=\"当前验证码为随机生成\"\n          >\n            <span\n              v-for=\"(digit, index) in captchaDisplay\"\n              :key=\"index\"\n              :style=\"getRandomStyle()\"\n            >{{ digit }}</span>\n          </div>\n        </div>\n      </div>\n      <button type=\"submit\" :disabled=\"isLoading || !isFormValid\">\n        <span v-if=\"isLoading\">\n          <i class=\"fas fa-spinner fa-spin\"></i> 注册中...\n        </span>\n        <span v-else>注册</span>\n      </button>\n      <div v-if=\"errorMessage\" class=\"error-container\">\n        <i class=\"fas fa-exclamation-circle\"></i>\n        {{ errorMessage }}\n      </div>\n      <div class=\"login-link\">\n        已有账号? <router-link to=\"/login\">点击登录</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\n\nconst api = axios.create(axiosConfig);\n\nexport default {\n  data() {\n    return {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      captchaInput: '',\n      captchaDisplay: '',  // 显示的验证码\n      systemCaptcha: '',   // 系统生成的验证码，用于比对\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      showConfirmPassword: false,\n      refreshCount: 0\n    };\n  },\n  computed: {\n    isFormValid() {\n      return this.username.trim() && \n             this.email.trim() && \n             this.password && \n             this.password === this.confirmPassword &&\n             this.captchaInput && \n             this.captchaInput.length === 4;\n    }\n  },\n  created() {\n    // 初始化生成随机验证码\n    this.generateCaptcha();\n  },\n  methods: {\n    clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    toggleConfirmPassword() {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    },\n    // 生成新的随机验证码\n    generateCaptcha() {\n      // 生成四位随机数字 (1000-9999)\n      const randomNum = Math.floor(1000 + Math.random() * 9000);\n      const captchaString = randomNum.toString();\n      \n      // 设置显示验证码和系统验证码\n      this.captchaDisplay = captchaString;\n      this.systemCaptcha = captchaString;\n      this.captchaInput = ''; // 清空用户输入\n      \n      // 如果已经有输入框状态，添加刷新动画\n      const captchaElement = document.querySelector('.captcha-code');\n      if (captchaElement && this.refreshCount > 0) {\n        captchaElement.classList.add('refreshing');\n        setTimeout(() => {\n          captchaElement.classList.remove('refreshing');\n        }, 500);\n      }\n      \n      this.refreshCount++;\n      console.log(`生成新验证码: ${this.systemCaptcha}`);\n    },\n    // 为每个数字生成随机样式，增加视觉干扰\n    getRandomStyle() {\n      const rotation = Math.floor(Math.random() * 10) - 5;\n      const fontSize = 14 + Math.floor(Math.random() * 4);\n      const letterSpacing = Math.floor(Math.random() * 3) - 1;\n      \n      return {\n        transform: `rotate(${rotation}deg)`,\n        fontSize: `${fontSize}px`,\n        letterSpacing: `${letterSpacing}px`,\n        display: 'inline-block',\n        fontWeight: 'bold',\n        margin: '0 2px'\n      };\n    },\n    async handleSubmit() {\n      if (!this.isFormValid) {\n        if (this.password !== this.confirmPassword) {\n          this.errorMessage = '两次输入的密码不一致';\n          return;\n        }\n        return;\n      }\n      \n      // 检查验证码 - 与生成的验证码比对\n      if (this.captchaInput !== this.systemCaptcha) {\n        console.log(`验证码比对失败: 用户输入=\"${this.captchaInput}\", 系统验证码=\"${this.systemCaptcha}\"`);\n        this.errorMessage = '验证码错误，请重新输入';\n        this.captchaInput = '';\n        this.generateCaptcha(); // 生成新验证码\n        return;\n      }\n      \n      console.log(\"验证码校验通过，准备提交注册请求\");\n      \n      this.isLoading = true;\n      this.errorMessage = '';\n      \n      try {\n        const registerData = {\n          username: this.username.trim(),\n          email: this.email.trim(),\n          password: this.password,\n          captcha: \"0000\" // 固定发送\"0000\"给后端，保持兼容\n        };\n        \n        console.log('正在发送注册请求:', {\n          用户名: registerData.username,\n          邮箱: registerData.email,\n          验证码: \"固定发送0000\"\n        });\n        \n        const response = await api.post(API_URLS.register, registerData);\n        \n        console.log('服务器响应:', response.data);\n        \n        if (response.data && response.data.message === '注册成功') {\n          // 注册成功，跳转到登录页\n          this.$router.push('/login?registered=true');\n          return;\n        }\n        \n        // 如果没有成功消息但服务器返回了消息\n        if (response.data && response.data.message) {\n          this.errorMessage = response.data.message;\n          this.generateCaptcha();\n          return;\n        }\n      } catch (error) {\n        console.error('注册过程中发生错误:', error);\n        \n        // 处理API错误响应\n        if (error.response) {\n          const status = error.response.status;\n          const errorData = error.response.data;\n          \n          switch (status) {\n            case 400:\n              this.errorMessage = errorData.message || '注册信息有误，请检查输入';\n              break;\n            case 409:\n              this.errorMessage = '用户名已存在，请选择其他用户名';\n              break;\n            case 500:\n              this.errorMessage = '服务器错误，请稍后重试';\n              break;\n            default:\n              this.errorMessage = errorData?.message || '注册失败，请稍后重试';\n          }\n          this.generateCaptcha();\n        } else {\n          this.errorMessage = '无法连接到服务器，请检查网络连接';\n          this.generateCaptcha();\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.register-form {\n  width: 100%;\n  max-width: 400px;\n  margin: 2rem auto;\n  padding: 2.5rem;\n  border-radius: 12px;\n  background-color: rgba(255, 255, 255, 0.9);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(8px);\n  -webkit-backdrop-filter: blur(8px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  transition: all 0.3s ease;\n}\n\n.register-form:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.25);\n}\n\n.register-form h2 {\n  text-align: center;\n  color: #2c3e50;\n  margin-bottom: 2rem;\n  font-size: 2rem;\n  font-weight: 600;\n  letter-spacing: 1px;\n  position: relative;\n  padding-bottom: 10px;\n}\n\n.register-form h2::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 60px;\n  height: 3px;\n  background: linear-gradient(90deg, #4CA1AF, #2C3E50);\n  border-radius: 3px;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #455a64;\n  font-size: 0.95rem;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 0.85rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n  background-color: rgba(255, 255, 255, 0.8);\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #4CA1AF;\n  box-shadow: 0 0 0 3px rgba(76, 161, 175, 0.2);\n  background-color: #fff;\n}\n\n.form-group input:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.password-input {\n  position: relative;\n}\n\n.password-input i {\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  color: #78909c;\n  transition: all 0.2s ease;\n}\n\n.password-input i:hover {\n  color: #455a64;\n}\n\n.captcha-group {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.captcha-input {\n  flex: 1;\n}\n\n.captcha-code {\n  padding: 0.75rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  font-weight: bold;\n  letter-spacing: 2px;\n  min-width: 80px;\n  text-align: center;\n  border: 2px solid #e0e0e0;\n  color: #2c3e50;\n  user-select: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-image: linear-gradient(45deg, #f5f5f5 25%, #e8e8e8 25%, #e8e8e8 50%, #f5f5f5 50%, #f5f5f5 75%, #e8e8e8 75%, #e8e8e8);\n  background-size: 8px 8px;\n}\n\n.captcha-code:hover {\n  background-color: #e0e0e0;\n  transform: scale(1.02);\n}\n\n.captcha-code::before {\n  content: '';\n  position: absolute;\n  width: 100%;\n  height: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n}\n\n.captcha-code::after {\n  content: '点击刷新';\n  position: absolute;\n  bottom: -25px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 0.7rem;\n  color: #78909c;\n  white-space: nowrap;\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.captcha-code:hover::after {\n  opacity: 1;\n}\n\n.refreshing {\n  animation: refresh-animation 0.5s;\n}\n\n@keyframes refresh-animation {\n  0% { transform: rotate(0); opacity: 1; }\n  50% { transform: rotate(10deg); opacity: 0.5; }\n  100% { transform: rotate(0); opacity: 1; }\n}\n\nbutton {\n  width: 100%;\n  padding: 0.85rem;\n  background: linear-gradient(90deg, #4CA1AF, #2C3E50);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-top: 1rem;\n  letter-spacing: 0.5px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\nbutton:hover:not(:disabled) {\n  background: linear-gradient(90deg, #3c8997, #1a2c3f);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n}\n\nbutton:disabled {\n  background: #cccccc;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.error-container {\n  margin-top: 1rem;\n  padding: 0.75rem;\n  background-color: rgba(255, 76, 76, 0.1);\n  border-left: 3px solid #ff4c4c;\n  color: #d32f2f;\n  border-radius: 4px;\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n}\n\n.error-container i {\n  margin-right: 8px;\n  font-size: 1rem;\n}\n\n.login-link {\n  text-align: center;\n  margin-top: 1.5rem;\n  color: #455a64;\n  font-size: 0.95rem;\n}\n\n.login-link a {\n  color: #4CA1AF;\n  text-decoration: none;\n  font-weight: 600;\n  transition: all 0.3s ease;\n}\n\n.login-link a:hover {\n  color: #2C3E50;\n  text-decoration: underline;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.fa-spinner {\n  animation: spin 1s linear infinite;\n  margin-right: 8px;\n}\n\n/* 去除number类型输入框的上下箭头 */\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type=\"number\"] {\n  -moz-appearance: textfield;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}