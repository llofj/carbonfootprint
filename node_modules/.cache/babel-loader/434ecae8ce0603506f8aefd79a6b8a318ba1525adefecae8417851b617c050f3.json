{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"achievements-page\"\n};\nvar _hoisted_2 = {\n  \"class\": \"achievement-summary\"\n};\nvar _hoisted_3 = {\n  \"class\": \"summary-card\"\n};\nvar _hoisted_4 = {\n  \"class\": \"summary-count\"\n};\nvar _hoisted_5 = {\n  \"class\": \"summary-card\"\n};\nvar _hoisted_6 = {\n  \"class\": \"summary-count\"\n};\nvar _hoisted_7 = {\n  \"class\": \"summary-card\"\n};\nvar _hoisted_8 = {\n  \"class\": \"summary-count\"\n};\nvar _hoisted_9 = {\n  \"class\": \"achievement-container\"\n};\nvar _hoisted_10 = {\n  \"class\": \"achievement-icon\"\n};\nvar _hoisted_11 = {\n  \"class\": \"achievement-info\"\n};\nvar _hoisted_12 = {\n  key: 0,\n  \"class\": \"unlock-date\"\n};\nvar _hoisted_13 = {\n  key: 1,\n  \"class\": \"locked-badge\"\n};\nvar _hoisted_14 = {\n  \"class\": \"check-achievements\"\n};\nvar _hoisted_15 = {\n  key: 0,\n  \"class\": \"new-achievements\"\n};\nvar _hoisted_16 = {\n  \"class\": \"achievement-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"我的成就\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"成就总数\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($data.userAchievements.length) + \" / \" + _toDisplayString($data.achievementTypes.length), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"减排总量\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, _toDisplayString($data.carbonReduction.toFixed(1)) + \" kg CO₂\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"排行榜排名\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, \"#\" + _toDisplayString($data.userRank ? $data.userRank.rank : 'N/A'), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.achievementTypes, function (achievement) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: achievement.id,\n      \"class\": _normalizeClass([\"achievement-card\", {\n        'unlocked': $options.isUnlocked(achievement.id)\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"i\", {\n      \"class\": _normalizeClass(['fas', achievement.icon])\n    }, null, 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"h3\", null, _toDisplayString(achievement.name), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(achievement.description), 1 /* TEXT */), $options.isUnlocked(achievement.id) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, \" 解锁于: \" + _toDisplayString($options.getUnlockDate(achievement.id)), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_13, \" 未解锁 \"))])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.checkNewAchievements && $options.checkNewAchievements.apply($options, arguments);\n    }),\n    \"class\": \"check-btn\"\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"i\", {\n    \"class\": \"fas fa-sync-alt\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" 检查新成就 \")]))]), $data.newAchievements.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"新解锁成就\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_16, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.newAchievements, function (achievement) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: achievement.id,\n      \"class\": \"new-achievement\"\n    }, [_createElementVNode(\"i\", {\n      \"class\": _normalizeClass(['fas', achievement.icon])\n    }, null, 2 /* CLASS */), _createElementVNode(\"span\", null, _toDisplayString(achievement.achievement_name), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$data","userAchievements","length","achievementTypes","_hoisted_5","_hoisted_6","carbonReduction","toFixed","_hoisted_7","_hoisted_8","userRank","rank","_hoisted_9","_Fragment","_renderList","achievement","id","_normalizeClass","$options","isUnlocked","_hoisted_10","icon","_hoisted_11","name","description","_hoisted_12","getUnlockDate","_hoisted_13","_hoisted_14","onClick","_cache","checkNewAchievements","apply","arguments","_createTextVNode","newAchievements","_hoisted_15","_hoisted_16","achievement_name","_createCommentVNode"],"sources":["D:\\EcoPaw\\carbonfootprint\\src\\components\\Achievements.vue"],"sourcesContent":["<template>\n  <div class=\"achievements-page\">\n    <h2>我的成就</h2>\n    \n    <div class=\"achievement-summary\">\n      <div class=\"summary-card\">\n        <h3>成就总数</h3>\n        <div class=\"summary-count\">{{ userAchievements.length }} / {{ achievementTypes.length }}</div>\n      </div>\n      \n      <div class=\"summary-card\">\n        <h3>减排总量</h3>\n        <div class=\"summary-count\">{{ carbonReduction.toFixed(1) }} kg CO₂</div>\n      </div>\n      \n      <div class=\"summary-card\">\n        <h3>排行榜排名</h3>\n        <div class=\"summary-count\">#{{ userRank ? userRank.rank : 'N/A' }}</div>\n      </div>\n    </div>\n    \n    <div class=\"achievement-container\">\n      <div v-for=\"achievement in achievementTypes\" :key=\"achievement.id\" \n           class=\"achievement-card\" \n           :class=\"{ 'unlocked': isUnlocked(achievement.id) }\">\n        <div class=\"achievement-icon\">\n          <i :class=\"['fas', achievement.icon]\"></i>\n        </div>\n        <div class=\"achievement-info\">\n          <h3>{{ achievement.name }}</h3>\n          <p>{{ achievement.description }}</p>\n          <div v-if=\"isUnlocked(achievement.id)\" class=\"unlock-date\">\n            解锁于: {{ getUnlockDate(achievement.id) }}\n          </div>\n          <div v-else class=\"locked-badge\">\n            未解锁\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"check-achievements\">\n      <button @click=\"checkNewAchievements\" class=\"check-btn\">\n        <i class=\"fas fa-sync-alt\"></i> 检查新成就\n      </button>\n    </div>\n    \n    <div v-if=\"newAchievements.length > 0\" class=\"new-achievements\">\n      <h3>新解锁成就</h3>\n      <div class=\"achievement-list\">\n        <div v-for=\"achievement in newAchievements\" :key=\"achievement.id\" class=\"new-achievement\">\n          <i :class=\"['fas', achievement.icon]\"></i>\n          <span>{{ achievement.achievement_name }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      achievementTypes: [],\n      userAchievements: [],\n      newAchievements: [],\n      carbonReduction: 0,\n      userRank: null\n    };\n  },\n  async created() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        this.$router.push('/login');\n        return;\n      }\n      \n      await this.loadAchievementTypes();\n      await this.loadUserAchievements();\n      await this.loadCarbonReduction();\n      await this.loadUserRank();\n    } catch (error) {\n      console.error('Error loading achievements data:', error);\n    }\n  },\n  methods: {\n    async loadAchievementTypes() {\n      try {\n        const response = await axios.get('http://localhost:5000/api/achievement/types');\n        this.achievementTypes = response.data;\n      } catch (error) {\n        console.error('Error loading achievement types:', error);\n      }\n    },\n    \n    async loadUserAchievements() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/achievement/user', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        this.userAchievements = response.data;\n      } catch (error) {\n        console.error('Error loading user achievements:', error);\n      }\n    },\n    \n    async loadCarbonReduction() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/achievement/carbon-reduction', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        this.carbonReduction = response.data.carbon_reduction || 0;\n      } catch (error) {\n        console.error('Error loading carbon reduction:', error);\n      }\n    },\n    \n    async loadUserRank() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/leaderboard/user', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        this.userRank = response.data;\n      } catch (error) {\n        console.error('Error loading user rank:', error);\n      }\n    },\n    \n    isUnlocked(achievementId) {\n      return this.userAchievements.some(a => a.achievement_id === achievementId);\n    },\n    \n    getUnlockDate(achievementId) {\n      const achievement = this.userAchievements.find(a => a.achievement_id === achievementId);\n      if (achievement) {\n        return new Date(achievement.date).toLocaleDateString();\n      }\n      return '';\n    },\n    \n    async checkNewAchievements() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/achievement/check', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        this.newAchievements = response.data.newAchievements;\n        \n        if (this.newAchievements.length > 0) {\n          alert('恭喜！您解锁了新成就');\n          // 重新加载用户成就\n          await this.loadUserAchievements();\n          // 更新排行榜数据\n          await axios.post('http://localhost:5000/api/leaderboard/update', {}, {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n          await this.loadUserRank();\n          await this.loadCarbonReduction();\n        } else {\n          alert('暂未解锁新成就，继续努力！');\n        }\n      } catch (error) {\n        console.error('Error checking achievements:', error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.achievements-page {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n}\n\n.achievement-summary {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.summary-card {\n  flex: 1;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  padding: 15px;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.summary-card h3 {\n  margin-top: 0;\n  color: #555;\n  font-size: 14px;\n}\n\n.summary-count {\n  font-size: 24px;\n  font-weight: bold;\n  color: #2196F3;\n}\n\n.achievement-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.achievement-card {\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  padding: 15px;\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease;\n}\n\n.achievement-card:hover {\n  transform: translateY(-5px);\n}\n\n.achievement-card.unlocked {\n  background-color: #e8f5e9;\n  border-left: 4px solid #4CAF50;\n}\n\n.achievement-icon {\n  width: 40px;\n  height: 40px;\n  background-color: #e0e0e0;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.achievement-card.unlocked .achievement-icon {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.achievement-icon i {\n  font-size: 20px;\n}\n\n.achievement-info {\n  flex: 1;\n}\n\n.achievement-info h3 {\n  margin: 0 0 5px 0;\n  font-size: 16px;\n}\n\n.achievement-info p {\n  margin: 0 0 10px 0;\n  font-size: 12px;\n  color: #666;\n}\n\n.unlock-date {\n  font-size: 12px;\n  color: #4CAF50;\n}\n\n.locked-badge {\n  font-size: 12px;\n  color: #9e9e9e;\n  font-style: italic;\n}\n\n.check-achievements {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.check-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.3s;\n}\n\n.check-btn:hover {\n  background-color: #0d8bf0;\n}\n\n.new-achievements {\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  padding: 15px;\n  margin-top: 20px;\n}\n\n.new-achievements h3 {\n  margin-top: 0;\n  color: #333;\n  font-size: 18px;\n}\n\n.achievement-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.new-achievement {\n  background-color: #e8f5e9;\n  border-radius: 4px;\n  padding: 8px 12px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n}\n\n.new-achievement i {\n  color: #4CAF50;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}