{"ast":null,"code":"import _regeneratorRuntime from \"D:/computer_design/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/computer_design/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\nvar api = axios.create(axiosConfig);\nexport default {\n  data: function data() {\n    return {\n      username: '',\n      password: '',\n      captcha: '0000',\n      // 默认填充为0000\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      loginAttempts: 0,\n      maxLoginAttempts: 5,\n      lockTime: 60,\n      // 锁定时间（秒）\n      lockTimeRemaining: 0,\n      lockTimeInterval: null,\n      debugMode: process.env.NODE_ENV === 'development'\n    };\n  },\n  computed: {\n    isFormValid: function isFormValid() {\n      return this.username.trim() && this.password && this.captcha.trim() === '0000';\n    }\n  },\n  methods: {\n    clearError: function clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword: function togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    startLockTimer: function startLockTimer() {\n      var _this = this;\n      this.lockTimeRemaining = this.lockTime;\n      this.lockTimeInterval = setInterval(function () {\n        _this.lockTimeRemaining--;\n        if (_this.lockTimeRemaining <= 0) {\n          _this.resetLockout();\n        }\n      }, 1000);\n    },\n    resetLockout: function resetLockout() {\n      clearInterval(this.lockTimeInterval);\n      this.lockTimeInterval = null;\n      this.loginAttempts = 0;\n      this.lockTimeRemaining = 0;\n    },\n    increaseLoginAttempt: function increaseLoginAttempt() {\n      this.loginAttempts++;\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        this.startLockTimer();\n        this.errorMessage = \"\\u767B\\u5F55\\u5C1D\\u8BD5\\u6B21\\u6570\\u8FC7\\u591A\\uFF0C\\u8D26\\u53F7\\u5DF2\\u88AB\\u4E34\\u65F6\\u9501\\u5B9A \".concat(this.lockTime, \" \\u79D2\");\n      }\n    },\n    validateForm: function validateForm() {\n      var isValid = true;\n      if (!this.username.trim()) {\n        this.errorMessage = '请输入用户名';\n        isValid = false;\n      } else if (!this.password) {\n        this.errorMessage = '请输入密码';\n        isValid = false;\n      } else if (this.captcha.trim() !== '0000') {\n        this.errorMessage = '验证码错误，请输入0000';\n        isValid = false;\n      }\n      return isValid;\n    },\n    // 调试辅助\n    debug: function debug(message, data) {\n      if (this.debugMode) {\n        console.log(\"[Login] \".concat(message), data || '');\n      }\n    },\n    handleSubmit: function handleSubmit() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var loginData, response, redirect, _redirect, _redirect2, status, errorData, _redirect3, _redirect4;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this2.loginAttempts >= _this2.maxLoginAttempts)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              if (_this2.validateForm()) {\n                _context.next = 5;\n                break;\n              }\n              _this2.increaseLoginAttempt();\n              return _context.abrupt(\"return\");\n            case 5:\n              _this2.isLoading = true;\n              _this2.errorMessage = '';\n              _context.prev = 7;\n              loginData = {\n                username: _this2.username.trim(),\n                password: _this2.password,\n                captcha: _this2.captcha.trim()\n              };\n              _this2.debug('登录请求数据:', loginData);\n              _this2.debug('登录请求URL:', \"\".concat(axiosConfig.baseURL).concat(API_URLS.login));\n\n              // 发送登录请求\n              _context.next = 13;\n              return api.post(API_URLS.login, loginData);\n            case 13:\n              response = _context.sent;\n              _this2.debug('服务器响应:', response.data);\n              if (!(response.data && response.data.token)) {\n                _context.next = 25;\n                break;\n              }\n              // 登录成功，重置尝试次数\n              _this2.resetLockout();\n\n              // 存储用户信息\n              localStorage.setItem('token', response.data.token);\n              localStorage.setItem('username', _this2.username.trim());\n              if (response.data.user) {\n                localStorage.setItem('userId', response.data.user.id);\n                localStorage.setItem('userEmail', response.data.user.email || '');\n              }\n              _this2.debug('登录成功，即将跳转');\n\n              // 跳转到目标页面\n              redirect = _this2.$route.query.redirect || '/';\n              _context.next = 24;\n              return _this2.$router.push(redirect);\n            case 24:\n              return _context.abrupt(\"return\");\n            case 25:\n              if (!(response.data && response.data.message)) {\n                _context.next = 29;\n                break;\n              }\n              _this2.errorMessage = response.data.message;\n              _this2.increaseLoginAttempt();\n              return _context.abrupt(\"return\");\n            case 29:\n              if (!(_this2.username.toLowerCase() === 'test' && _this2.password === '123456')) {\n                _context.next = 39;\n                break;\n              }\n              _this2.debug('使用测试账号登录');\n              // 重置尝试次数\n              _this2.resetLockout();\n              localStorage.setItem('token', 'mock-token-12345');\n              localStorage.setItem('username', _this2.username.trim());\n              localStorage.setItem('userId', '2'); // 数据库中test用户的ID为2\n              _redirect = _this2.$route.query.redirect || '/';\n              _context.next = 38;\n              return _this2.$router.push(_redirect);\n            case 38:\n              return _context.abrupt(\"return\");\n            case 39:\n              if (!(_this2.username.toLowerCase() === 'llofj' && _this2.password === '123456')) {\n                _context.next = 49;\n                break;\n              }\n              _this2.debug('使用llofj账号登录');\n              // 重置尝试次数\n              _this2.resetLockout();\n              localStorage.setItem('token', 'mock-token-llofj');\n              localStorage.setItem('username', 'llofj');\n              localStorage.setItem('userId', '1'); // 数据库中llofj用户的ID为1\n              _redirect2 = _this2.$route.query.redirect || '/';\n              _context.next = 48;\n              return _this2.$router.push(_redirect2);\n            case 48:\n              return _context.abrupt(\"return\");\n            case 49:\n              _this2.errorMessage = '账号或密码错误';\n              _this2.increaseLoginAttempt();\n              _context.next = 102;\n              break;\n            case 53:\n              _context.prev = 53;\n              _context.t0 = _context[\"catch\"](7);\n              _this2.debug('登录请求失败:', _context.t0);\n              if (!_context.t0.response) {\n                _context.next = 76;\n                break;\n              }\n              status = _context.t0.response.status;\n              errorData = _context.t0.response.data;\n              _this2.debug('错误状态码:', status);\n              _this2.debug('错误数据:', errorData);\n              _context.t1 = status;\n              _context.next = _context.t1 === 401 ? 64 : _context.t1 === 403 ? 66 : _context.t1 === 429 ? 68 : _context.t1 === 500 ? 70 : 72;\n              break;\n            case 64:\n              _this2.errorMessage = '账号或密码错误';\n              return _context.abrupt(\"break\", 73);\n            case 66:\n              _this2.errorMessage = '验证码错误';\n              return _context.abrupt(\"break\", 73);\n            case 68:\n              _this2.errorMessage = '登录尝试次数过多，请稍后再试';\n              return _context.abrupt(\"break\", 73);\n            case 70:\n              _this2.errorMessage = '服务器错误，请稍后重试';\n              return _context.abrupt(\"break\", 73);\n            case 72:\n              _this2.errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || '登录失败，请稍后重试';\n            case 73:\n              _this2.increaseLoginAttempt();\n              _context.next = 102;\n              break;\n            case 76:\n              if (!_context.t0.request) {\n                _context.next = 100;\n                break;\n              }\n              // 服务器没有响应，尝试备用登录\n              _this2.debug('服务器未响应，尝试备用登录');\n\n              // 尝试硬编码的备用登录（测试账号）\n              if (!(_this2.username.toLowerCase() === 'test' && _this2.password === '123456')) {\n                _context.next = 87;\n                break;\n              }\n              _this2.resetLockout();\n              localStorage.setItem('token', 'mock-token-12345');\n              localStorage.setItem('username', 'test');\n              localStorage.setItem('userId', '2');\n              _redirect3 = _this2.$route.query.redirect || '/';\n              _context.next = 86;\n              return _this2.$router.push(_redirect3);\n            case 86:\n              return _context.abrupt(\"return\");\n            case 87:\n              if (!(_this2.username.toLowerCase() === 'llofj' && _this2.password === '123456')) {\n                _context.next = 96;\n                break;\n              }\n              _this2.resetLockout();\n              localStorage.setItem('token', 'mock-token-llofj');\n              localStorage.setItem('username', 'llofj');\n              localStorage.setItem('userId', '1');\n              _redirect4 = _this2.$route.query.redirect || '/';\n              _context.next = 95;\n              return _this2.$router.push(_redirect4);\n            case 95:\n              return _context.abrupt(\"return\");\n            case 96:\n              _this2.errorMessage = '无法连接到服务器，请检查网络连接';\n              _this2.increaseLoginAttempt();\n              _context.next = 102;\n              break;\n            case 100:\n              _this2.errorMessage = '登录请求发送失败';\n              _this2.increaseLoginAttempt();\n            case 102:\n              _context.prev = 102;\n              _this2.isLoading = false;\n              return _context.finish(102);\n            case 105:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[7, 53, 102, 105]]);\n      }))();\n    }\n  },\n  created: function created() {\n    // 如果有token，直接跳转\n    if (localStorage.getItem('token')) {\n      var redirect = this.$route.query.redirect || '/';\n      this.$router.push(redirect);\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    // 清除可能存在的计时器\n    if (this.lockTimeInterval) {\n      clearInterval(this.lockTimeInterval);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URLS","axiosConfig","api","create","data","username","password","captcha","errorMessage","isLoading","showPassword","loginAttempts","maxLoginAttempts","lockTime","lockTimeRemaining","lockTimeInterval","debugMode","process","env","NODE_ENV","computed","isFormValid","trim","methods","clearError","togglePassword","startLockTimer","_this","setInterval","resetLockout","clearInterval","increaseLoginAttempt","concat","validateForm","isValid","debug","message","console","log","handleSubmit","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","loginData","response","redirect","_redirect","_redirect2","status","errorData","_redirect3","_redirect4","wrap","_callee$","_context","prev","next","abrupt","baseURL","login","post","sent","token","localStorage","setItem","user","id","email","$route","query","$router","push","toLowerCase","t0","t1","request","finish","stop","created","getItem","beforeUnmount"],"sources":["D:\\computer_design\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\n  <div class=\"login-form\">\n    <h2>登录</h2>\n    <form @submit.prevent=\"handleSubmit\">\n      <div class=\"form-group\">\n        <label for=\"username\">账号:</label>\n        <input \n          type=\"text\" \n          id=\"username\" \n          v-model.trim=\"username\" \n          required \n          :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n          @input=\"clearError\"\n          placeholder=\"请输入用户名\"\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">密码:</label>\n        <div class=\"password-input\">\n          <input \n            :type=\"showPassword ? 'text' : 'password'\" \n            id=\"password\" \n            v-model=\"password\" \n            required \n            :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n            @input=\"clearError\"\n            placeholder=\"请输入密码\"\n          />\n          <i \n            class=\"fas\" \n            :class=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"\n            @click=\"togglePassword\"\n          ></i>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"captcha\">验证码:</label>\n        <div class=\"captcha-group\">\n          <div class=\"captcha-input\">\n            <input \n              type=\"text\" \n              id=\"captcha\" \n              v-model.trim=\"captcha\" \n              required \n              :disabled=\"isLoading || loginAttempts >= maxLoginAttempts\"\n              @input=\"clearError\"\n              maxlength=\"4\"\n              placeholder=\"请输入验证码\"\n            />\n          </div>\n          <div class=\"captcha-code\">\n            0000\n          </div>\n        </div>\n        <div class=\"captcha-hint\">(请输入0000)</div>\n      </div>\n      <button type=\"submit\" :disabled=\"isLoading || !isFormValid || loginAttempts >= maxLoginAttempts\">\n        <span v-if=\"isLoading\">\n          <i class=\"fas fa-spinner fa-spin\"></i> 登录中...\n        </span>\n        <span v-else-if=\"loginAttempts >= maxLoginAttempts\">\n          <i class=\"fas fa-lock\"></i> 登录已锁定 ({{ lockTimeRemaining }}秒)\n        </span>\n        <span v-else>登录</span>\n      </button>\n      <div v-if=\"errorMessage\" class=\"error-container\">\n        <i class=\"fas fa-exclamation-circle\"></i>\n        {{ errorMessage }}\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_URLS, axiosConfig } from '../config/api';\n\nconst api = axios.create(axiosConfig);\n\nexport default {\n  data() {\n    return {\n      username: '',\n      password: '',\n      captcha: '0000', // 默认填充为0000\n      errorMessage: '',\n      isLoading: false,\n      showPassword: false,\n      loginAttempts: 0,\n      maxLoginAttempts: 5,\n      lockTime: 60, // 锁定时间（秒）\n      lockTimeRemaining: 0,\n      lockTimeInterval: null,\n      debugMode: process.env.NODE_ENV === 'development'\n    };\n  },\n  computed: {\n    isFormValid() {\n      return this.username.trim() && \n             this.password && \n             this.captcha.trim() === '0000';\n    }\n  },\n  methods: {\n    clearError() {\n      this.errorMessage = '';\n    },\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    startLockTimer() {\n      this.lockTimeRemaining = this.lockTime;\n      this.lockTimeInterval = setInterval(() => {\n        this.lockTimeRemaining--;\n        if (this.lockTimeRemaining <= 0) {\n          this.resetLockout();\n        }\n      }, 1000);\n    },\n    resetLockout() {\n      clearInterval(this.lockTimeInterval);\n      this.lockTimeInterval = null;\n      this.loginAttempts = 0;\n      this.lockTimeRemaining = 0;\n    },\n    increaseLoginAttempt() {\n      this.loginAttempts++;\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        this.startLockTimer();\n        this.errorMessage = `登录尝试次数过多，账号已被临时锁定 ${this.lockTime} 秒`;\n      }\n    },\n    validateForm() {\n      let isValid = true;\n      \n      if (!this.username.trim()) {\n        this.errorMessage = '请输入用户名';\n        isValid = false;\n      } else if (!this.password) {\n        this.errorMessage = '请输入密码';\n        isValid = false;\n      } else if (this.captcha.trim() !== '0000') {\n        this.errorMessage = '验证码错误，请输入0000';\n        isValid = false;\n      }\n      \n      return isValid;\n    },\n    // 调试辅助\n    debug(message, data) {\n      if (this.debugMode) {\n        console.log(`[Login] ${message}`, data || '');\n      }\n    },\n    async handleSubmit() {\n      // 如果达到最大尝试次数，不处理提交\n      if (this.loginAttempts >= this.maxLoginAttempts) {\n        return;\n      }\n      \n      // 表单验证\n      if (!this.validateForm()) {\n        this.increaseLoginAttempt();\n        return;\n      }\n      \n      this.isLoading = true;\n      this.errorMessage = '';\n      \n      try {\n        const loginData = {\n          username: this.username.trim(),\n          password: this.password,\n          captcha: this.captcha.trim()\n        };\n        \n        this.debug('登录请求数据:', loginData);\n        this.debug('登录请求URL:', `${axiosConfig.baseURL}${API_URLS.login}`);\n        \n        // 发送登录请求\n        const response = await api.post(API_URLS.login, loginData);\n        \n        this.debug('服务器响应:', response.data);\n        \n        if (response.data && response.data.token) {\n          // 登录成功，重置尝试次数\n          this.resetLockout();\n          \n          // 存储用户信息\n          localStorage.setItem('token', response.data.token);\n          localStorage.setItem('username', this.username.trim());\n          \n          if (response.data.user) {\n            localStorage.setItem('userId', response.data.user.id);\n            localStorage.setItem('userEmail', response.data.user.email || '');\n          }\n          \n          this.debug('登录成功，即将跳转');\n          \n          // 跳转到目标页面\n          const redirect = this.$route.query.redirect || '/';\n          await this.$router.push(redirect);\n          return;\n        }\n        \n        // 如果没有token但服务器返回了消息\n        if (response.data && response.data.message) {\n          this.errorMessage = response.data.message;\n          this.increaseLoginAttempt();\n          return;\n        }\n        \n        // 尝试硬编码的备用登录方式（测试账号）\n        if (this.username.toLowerCase() === 'test' && this.password === '123456') {\n          this.debug('使用测试账号登录');\n          // 重置尝试次数\n          this.resetLockout();\n          \n          localStorage.setItem('token', 'mock-token-12345');\n          localStorage.setItem('username', this.username.trim());\n          localStorage.setItem('userId', '2'); // 数据库中test用户的ID为2\n          \n          const redirect = this.$route.query.redirect || '/';\n          await this.$router.push(redirect);\n          return;\n        }\n        \n        // 如果尝试以llofj用户名登录\n        if (this.username.toLowerCase() === 'llofj' && this.password === '123456') {\n          this.debug('使用llofj账号登录');\n          // 重置尝试次数\n          this.resetLockout();\n          \n          localStorage.setItem('token', 'mock-token-llofj');\n          localStorage.setItem('username', 'llofj');\n          localStorage.setItem('userId', '1'); // 数据库中llofj用户的ID为1\n          \n          const redirect = this.$route.query.redirect || '/';\n          await this.$router.push(redirect);\n          return;\n        }\n        \n        this.errorMessage = '账号或密码错误';\n        this.increaseLoginAttempt();\n        \n      } catch (error) {\n        this.debug('登录请求失败:', error);\n        \n        if (error.response) {\n          const status = error.response.status;\n          const errorData = error.response.data;\n          \n          this.debug('错误状态码:', status);\n          this.debug('错误数据:', errorData);\n          \n          switch (status) {\n            case 401:\n              this.errorMessage = '账号或密码错误';\n              break;\n            case 403:\n              this.errorMessage = '验证码错误';\n              break;\n            case 429:\n              this.errorMessage = '登录尝试次数过多，请稍后再试';\n              break;\n            case 500:\n              this.errorMessage = '服务器错误，请稍后重试';\n              break;\n            default:\n              this.errorMessage = errorData?.message || '登录失败，请稍后重试';\n          }\n          \n          this.increaseLoginAttempt();\n        } else if (error.request) {\n          // 服务器没有响应，尝试备用登录\n          this.debug('服务器未响应，尝试备用登录');\n          \n          // 尝试硬编码的备用登录（测试账号）\n          if (this.username.toLowerCase() === 'test' && this.password === '123456') {\n            this.resetLockout();\n            \n            localStorage.setItem('token', 'mock-token-12345');\n            localStorage.setItem('username', 'test');\n            localStorage.setItem('userId', '2');\n            \n            const redirect = this.$route.query.redirect || '/';\n            await this.$router.push(redirect);\n            return;\n          }\n          \n          // 尝试硬编码的备用登录（llofj账号）\n          if (this.username.toLowerCase() === 'llofj' && this.password === '123456') {\n            this.resetLockout();\n            \n            localStorage.setItem('token', 'mock-token-llofj');\n            localStorage.setItem('username', 'llofj');\n            localStorage.setItem('userId', '1');\n            \n            const redirect = this.$route.query.redirect || '/';\n            await this.$router.push(redirect);\n            return;\n          }\n          \n          this.errorMessage = '无法连接到服务器，请检查网络连接';\n          this.increaseLoginAttempt();\n        } else {\n          this.errorMessage = '登录请求发送失败';\n          this.increaseLoginAttempt();\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  },\n  created() {\n    // 如果有token，直接跳转\n    if (localStorage.getItem('token')) {\n      const redirect = this.$route.query.redirect || '/';\n      this.$router.push(redirect);\n    }\n  },\n  beforeUnmount() {\n    // 清除可能存在的计时器\n    if (this.lockTimeInterval) {\n      clearInterval(this.lockTimeInterval);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.login-form {\n  width: 100%;\n  max-width: 400px;\n  margin: 2rem auto;\n  padding: 2rem;\n  border-radius: 10px;\n  background-color: white;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.login-form h2 {\n  text-align: center;\n  color: #1e3d59;\n  margin-bottom: 2rem;\n  font-size: 1.8rem;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #333;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-size: 1rem;\n  transition: border-color 0.3s;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #3498db;\n  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n}\n\n.password-input {\n  position: relative;\n}\n\n.password-input i {\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  color: #777;\n}\n\n.captcha-group {\n  display: flex;\n  gap: 10px;\n}\n\n.captcha-input {\n  flex: 1;\n}\n\n.captcha-code {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 100px;\n  background-color: #f5f5f5;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-weight: bold;\n  letter-spacing: 3px;\n  color: #333;\n  user-select: none;\n}\n\n.captcha-hint {\n  margin-top: 4px;\n  font-size: 12px;\n  color: #888;\n}\n\nbutton {\n  width: 100%;\n  padding: 0.75rem;\n  border: none;\n  border-radius: 5px;\n  background-color: #3498db;\n  color: white;\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: #2980b9;\n}\n\nbutton:disabled {\n  background-color: #95a5a6;\n  cursor: not-allowed;\n}\n\n.error-container {\n  margin-top: 1rem;\n  padding: 0.75rem;\n  background-color: #ffebee;\n  border-radius: 5px;\n  color: #e53935;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.error-container i {\n  font-size: 1.1rem;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}